  100 rem Asalto y castigo - para QL, en SuperBASIC
  110 rem Assault and punishment - for QL, in SuperBASIC
  120 let version$="00-20110426"

  130 rem Copyright (C) 2011 Marcos Cruz (programandala.net)
  140 rem Licencia/License: http://programandala.net/licencia

  150 rem Programa original para / Original program for
  160 rem ZX Spectrum, Amstrad CPC, Blassic:
  170 rem Copyright (C) 2009 Baltasar el Arquero
  180 rem http://caad.es/baltasarq/

  190 rem --------------------------------------------
  200 rem Notas
  210 rem Notes

  220 rem Este fichero no usa el juego de caracteres de QL sino la codificación estándar ISO 8859-1.
  230 rem This file doesn't use the QL charset but a standard ISO 8859-1 encoding.

  240 rem Este programa y su lanzador utilizan varios comandos y funciones de las siguientes extensiones de SuperBASIC:
  250 rem This program and its boot use several commands and functions from the following SuperBASIC extensions:

  260 rem De/From "MegaToolkit", (C) 1992 Michael A. Crowe:
  270 rem   true,false,here,char_w,char_x,pos_x,pos_y,lnum
  280 rem De/From "DIY Toolkit", (C) Simon N. Goodwin:
  290 rem   inarray%

  300 rem --------------------------------------------
  310 rem Main

  320 main

  330 defproc main

  340   first_time_init
  350   rep game
  360     about
  370     game_init
  380     end_of_scene
  390     intro
  400     action_look
  410     rep your_turn
  420       plot
  430       command
  440       if start_over:exit your_turn
  450     endrep your_turn
  460   endrep game

  470 enddef

  480 rem --------------------------------------------
  490 rem Argumento
  500 rem Plot

  510 defproc plot

  520   rem Comprueba las condiciones de la trama y actúa en consecuencia.
  530   rem Check the plot conditions and do what needed. (accordingly?!!!)

  540   if current_location=8 and location_exit(8,north)

  550     let location_exit(8,north)=false
  560     let saxons_follow=1
  570     narrate "Una partida sajona aparece por el este. Para cuando te vuelves al norte, ya no te queda ninguna duda: era una trampa."
  580     short_pause
  590     narrate "En el estrecho paso es posible resistir, aunque por desgracia sus efectivos son muy superiores a los tuyos.":rem "efectivos"?!!!
  600     end_of_scene:clear_screen
  610     narrate "Tus oficiales te conminan a huir."
  620     speak "Capturando a un general britano, ganan doblemente."
  630     narrate "Sabes que es cierto, y te duele."

  640     ret

  650   endif

  660   if saxons_follow and current_location<12
  670     let saxons_follow=saxons_follow+1
  680     narrate "No sabes cuánto tiempo te queda..."
  690     if saxons_follow>10 
  700       narrate "Los sajones te capturan. Su general, sonriendo ampliamente, dice:"
  710       speak "Bien, bien... Del gran Ulfius podremos sacar una buena ventaja."
  720       end_of_scene:clear_screen
  730       action_end
  740     endif
  750     ret
  760   endif

  770   if current_location<10 and not location_exit(8,north)
  780     narrate "Tus hombres luchan con denuedo contra los sajones."
  790     ret
  800   endif

  810   if current_location>19 and (not is_it_accessible(the_torch) or not lit_the_torch)
  820     rem por qué >19?!!!
  830     narrate "Ante la reinante e intimidante oscuridad, retrocedes a donde puedes ver."
  840     short_pause
  850     let current_location=17
  860     action_look
  870     ret
  880   endif

  890   if current_location=51
  900     narrate "Agotado, das parte en el castillo de tu llegada y de lo que ha pasado."
  910     short_pause
  920     narrate "Pides audiencia al rey, Uther Pendragón."
  930     end_of_scene:clear_screen
  940     speak "El rey, te indica el valido, ha ordenado que no se le moleste, pues sufre una amarga tristeza."
  950     short_pause
  960     narrate "No puedes entenderlo. El rey, tu amigo."
  970     short_pause
  980     narrate "Agotado, decepcionado, apesadumbrado, decides ir a dormir a tu casa. Es lo poco que puedes hacer."
  990     short_pause
 1000     narrate "Te has ganado un buen descanso."
 1010     end_of_scene:clear_screen
 1020     action_end
 1030   endif

 1040 enddef

 1050 defproc location_plot

 1060   rem Comprueba las condiciones de la trama relacionadas con el nuevo escenario y actúa en consecuencia.
 1070   rem Check the plot conditions of the new location and do what needed.

 1080   sel on current_location
 1090     =11,38,44
 1100       let location(the_lake)=current_location
 1110     =1 to 9
 1120       if location_exit(8,north):narrate "Tus hombres siguen tus pasos."
 1130     =16
 1140       narrate "En la distancia, por entre los resquicios de las rocas, y allende el canal de agua, los sajones tratan de buscar la salida que encontraste por casualidad."
 1150     =31
 1160       if location_exit(31,north)
 1170         narrate "Las rocas yacen desmoronadas a lo largo del pasaje."
 1180       else
 1190         narrate "Las rocas bloquean el camino."
 1200       endif
 1210     =28
 1220       let location_exit(28,east)=false
 1230   endsel

 1240   if not is_it_vanished(ambrosio) and can_be_taken(the_key) and (current_location=46 or ambrosio_follows)
 1250     let location(ambrosio)=current_location
 1260     narrate "Tu benefactor te sigue, esperanzado."
 1270   endif

 1280 enddef

 1290 defproc rocks_and_log

 1300   rem Acción de usar el tronco con las rocas.
 1310   rem Action using the log with rocks.

 1320   if hacked_the_log
 1330     narrate "Haciendo palanca, consigues desencajar una, y el resto caen por su propio peso."
 1340     do_vanish the_rocks
 1350     let location_exit(31,north)=32
 1360   else
 1370     narrate "Lo intentas con el tronco, pero la punta es demasiado gruesa, y no penetra entre los resquicios de las rocas."
 1380   endif

 1390 enddef

 1400 defproc open_the_door

 1410   rem Acción de abrir la puerta.
 1420   rem Action opening the door.

 1430   narrate "La puerta se abre, rechinando, mientras hiedras y hierbas se rompen en su trazado."
 1440   short_pause
 1450   narrate "Ambrosio, alegre, se despide de ti."
 1460   speak "Estoy seguro de que volveremos a vernos"&r_quote$&", dice."
 1470   narrate "Se ha ido."
 1480   do_vanish ambrosio
 1490   do_vanish the_key
 1500   let thing_description$(the_door)="Entreabierta."
 1510   let thing_description$(the_lock)="Abierto."
 1520   let location_exit(47,west)=48

 1530 enddef

 1540 rem --------------------------------------------
 1550 rem Analizador
 1560 rem Parser

 1570 defproc command

 1580   rem Acepta un comando, lo analiza y lo ejecuta.
 1590   rem Accept a command, analize it and execute it.

 1600   loc next_space,command$

 1610   let action=false
 1620   let object=false
 1630   let complement=false
 1640   let command$=accept$

 1650   rep find_word
 1660     let next_space=" " instr command$
 1670     parse_word command$(1 to next_space-1)
 1680     if next_space=len(command$):exit find_word
 1690     let command$=command$(next_space+1 to)
 1700   endrep find_word

 1710   if fine_command:do_action action

 1720 enddef

 1730 defproc parse_word(word$)

 1740   rem Analiza la palabra dada.
 1750   rem Analize the given word.

 1760   if not action
 1770     let action=parse_verb(word$)
 1780   else
 1790     if not object
 1800       let object=parse_noun(word$)
 1810     else
 1820       if not complement:complement=parse_noun(word$)
 1830     endif
 1840   endif

 1850 enddef

 1860 deffn parse_verb(word$)

 1870   rem Analiza la palabra dada, supuestamente un verbo.
 1880   rem Analize the given word; it's supposed to be a verb.

 1890   loc found
 1900   let found=inarray%(verb$,0,word$)
 1910   if found<0:ret 0
 1920   ret the_action(found)

 1930 enddef

 1940 deffn parse_noun(word$)

 1950   rem Analiza la palabra dada, supuestamente un sustantivo.
 1960   rem Analize the given word; it's supposed to be a noun.

 1970   loc found
 1980   let found=inarray%(noun$,0,word$)
 1990   if found<0:ret 0
 2000   ret the_thing(found)

 2010 enddef

 2020 deffn fine_command

 2030   rem Comprueba si el comando es correcto, tanto por las partes que lo componen como por la accesibilidad de objeto y complemento, si existen. Devuelve 1 si es correcto y 0 en caso contrario.
 2040   rem Check if the command is right: check its parts and the accesibility of the object and the complement, if present. Return 1 if it's right, or 0 otherwise.

 2050   loc syntax
 2060   let syntax=action_syntax(action)

 2070   if not action:narrate "No conozco ese verbo.":ret 0

 2080   sel on syntax
 2090     =object_needed:if not object:narrate not_seen$:ret 0
 2100     =object_and_complement_needed:if (not object or not complement):narrate not_seen$:ret 0
 2110   endsel

 2120   if object:if not is_it_accessible(object):narrate not_seen$:ret 0
 2130   if complement:if not is_it_accessible(complement):narrate not_seen$:ret 0

 2140   ret 1

 2150 enddef

 2160 rem --------------------------------------------
 2170 rem Acciones
 2180 rem Actions

 2190 defproc do_action(action)

 2200   sel on action
 2210     =to_break:action_break
 2220     =to_drop:action_drop
 2230     =to_examine:action_examine
 2240     =to_finish:action_end
 2250     =to_fling:action_fling
 2260     =to_go_down:action_move down
 2270     =to_go_east:action_move east
 2280     =to_go_north:action_move north
 2290     =to_go_south:action_move south
 2300     =to_go_up:action_move up
 2310     =to_go_west:action_move west
 2320     =to_help:action_help
 2330     =to_insert:action_insert
 2340     =to_look:action_look
 2350     =to_open:action_open
 2360     =to_speak:action_speak
 2370     =to_swim:action_swim
 2380     =to_take:action_take
 2390     =remainder:narrate "No puedes hacer eso."
 2400   endsel

 2410 enddef

 2420 defproc action_help

 2430   narrate "Direcciones: n[orte], s[ur], e[ste], o[este], arriba y abajo."
 2440   narrate "m[irar] redescribe un lugar, ex[aminar] permite examinar un objeto, o en su defecto a ti."
 2450   narrate "Se puede cortar, nadar, atacar, empujar, golpear, coger, dejar, tirar..."
 2460   narrate "Se aceptan formas verbales en infinitivo e imperativo; y diversos sinónimos tanto de verbos como de nombres."
 2470   narrate "El atajo de teclado Ctrl+B (des)activa el bip de error de tecleo."

 2480 enddef

 2490 defproc action_examine

 2500   if object
 2510     if is_it_accessible(object)
 2520       narrate thing_description$(object)
 2530     else
 2540       narrate not_seen$
 2550     endif
 2560   else
 2570     action_inventory
 2580   endif

 2590 enddef

 2600 defproc action_end

 2610   if yes("¿Quieres volver a intentarlo?")
 2620     let start_over=true
 2630   else
 2640     clear_screen:stop
 2650   endif

 2660 enddef

 2670 defproc action_swim

 2680   if current_location=11
 2690     clear_screen
 2700     narrate "Caes hacia el fondo por el peso de tu coraza. Como puedes, te desprendes de ella y buceas, pensando en avanzar, aunque perdido."
 2710     short_pause
 2720     narrate "Consigues emerger, si bien en un sitio desconocido de la caverna..."
 2730     end_of_scene
 2740     let current_location=12
 2750     action_look
 2760   else
 2770     narrate "No tiene sentido nadar ahora."
 2780   endif

 2790 enddef

 2800 defproc action_open

 2810   if current_location=47
 2820     if object=the_door or object=the_lock
 2830       if is_it_accessible(the_key)
 2840         open_the_door
 2850       else
 2860         narrate "El candado bloquea la puerta."
 2870       endif
 2880     else
 2890       narrate "No tiene sentido abrir eso."
 2900     endif
 2910   else
 2920     narrate "No hay nada que abrir ahora."
 2930   endif

 2940 enddef

 2950 defproc action_drop

 2960   sel on object
 2970     =the_sword:if current_location<12:narrate "No, es lo que queda de mi padre.":ret
 2980     =the_torch:if lit_the_torch:narrate "No, sin luz es imposible moverse por la caverna.":ret
 2990   endsel
 3000   if location(object)=ulfius
 3010     let location(object)=current_location
 3020     narrate "Hecho."
 3030   else
 3040     narrate i_dont_have_it$
 3050   endif
 3060 enddef

 3070 defproc action_take

 3080   if location(object)=ulfius
 3090     narrate "Pero si ya lo tengo..."
 3100   else
 3110     if cannot_be_taken(object)
 3120       if object=the_key
 3130         narrate "Ambrosio la retiene consigo."
 3140       else
 3150         narrate "No es algo que se pueda coger."
 3160       endif
 3170     else
 3180       let location(object)=ulfius:narrate "Hecho."
 3190     endif
 3200   endif

 3210 enddef

 3220 defproc action_break

 3230   if not complement and is_it_accessible(the_sword)
 3240       let complement=the_sword
 3250   endif

 3260   sel on object

 3270     =the_log

 3280       if hacked_the_log
 3290         narrate "La punta ya es lo suficientemente afilada."
 3300       else
 3310         sel on complement
 3320           =false:narrate not_by_hand$
 3330           =the_sword
 3340             narrate "Sabes que el resultado es la hoja de tu espada, mellada. No."
 3350           =the_flint
 3360             let hacked_the_log=true
 3370             let thing_description$(the_log)=thing_description$(the_log)&" Su punta está afilada."
 3380             narrate "Con el pedernal, recortas la punta del tronco."
 3390           =remainder
 3400             narrate "El problema es encontrar la herramienta adecuada para hacerlo."
 3410         endsel
 3420       endif

 3430     =the_cloak

 3440       sel on complement
 3450         =false:narrate not_by_hand$
 3460         =the_sword
 3470           do_vanish the_cloak
 3480           let location(the_rags)=ulfius
 3490           let location(the_thread)=ulfius
 3500           let location(the_piece)=ulfius
 3510           narrate "Rasgas la capa, como buenamente puedes."
 3520         =remainder
 3530           narrate not_with_that$
 3540       endsel

 3550     =the_rocks

 3560       sel on complement
 3570         =false:narrate not_by_hand$
 3580         =the_log:rocks_and_log
 3590         =the_sword:narrate "Tu espada no hace nada."
 3600         =remainder:narrate not_with_that$
 3610       endsel

 3620     =the_flint

 3630       sel on complement
 3640         =false:narrate not_by_hand$
 3650         =the_sword
 3660           if is_it_accessible(the_torch)
 3670             let lit_the_torch=true
 3680             let thing_description$(the_torch)="Ilumina perfectamente."
 3690             narrate "Poderosas chispas salen del choque entre espada y pedernal, encendiendo la antorcha."
 3700           else
 3710             narrate "Ante el potente choque con la espada, poderosas chispas saltan en todas direcciones."
 3720           endif
 3730         =remainder:narrate not_with_that$
 3740       endsel

 3750     =the_snake

 3760       sel on complement
 3770         =false:narrate not_by_hand$
 3780         =the_sword
 3790           narrate "Ante los amenazadores tajos, la serpiente huye."
 3800           do_vanish the_snake
 3810           let location_exit(43,south)=44
 3820         =remainder:narrate not_with_that$
 3830       endsel

 3840     =remainder:narrate "Eso no es lo adecuado ahora."

 3850   endsel 

 3860 enddef

 3870 defproc action_speak

 3880   sel on object
 3890     =ambrosio:talk_to_ambrosio
 3900     =the_man:talk_to_the_man
 3910     =remainder:narrate "No tiene sentido hablar con eso."
 3920   endsel

 3930 enddef

 3940 defproc talk_to_ambrosio

 3950   if location(ambrosio)=19

 3960     speak "Hola, buen hombre."
 3970     speak "Hola, Ulfius. Mi nombre es Ambrosio."
 3980     end_of_scene:clear_screen
 3990     narrate "Por primera vez, Ulfius se sienta y cuenta a Ambrosio todo lo que ha pasado. Y tras tanto acontecido, llora desconsoladamente."
 4000     end_of_scene:clear_screen
 4010     narrate "Ambrosio le propone un trato, que acepta: por ayudarle a salir de la cueva, objetos, vitales para la empresa, le son entregados."
 4020     let location(the_torch)=ulfius
 4030     let location(the_flint)=ulfius
 4040     short_pause
 4050     speak "Bien, Ambrosio, emprendamos la marcha."
 4060     let location(ambrosio)=46
 4070     narrate "Ulfius se da la vuelta para ver si Ambrosio le sigue, pero... ha desaparecido."
 4080     short_pause
 4090     narrate "Ulfius piensa entonces en el hecho curioso de que supiera su nombre."
 4100     end_of_scene:clear_screen

 4110   else

 4120     if current_location=46
 4130       if not ambrosio_follows
 4140         speak "La llave, Ambrosio, estaba ya en tu poder. Y es obvio que conocéis un camino más corto."
 4150         speak "Estoy atrapado en la cueva debido a magia de maligno poder. En cuanto al camino, vos debéis hacer el vuestro, verlo todo con vuestros ojos."
 4160         narrate "Ulfius sacude la cabeza."
 4170         speak "No lo entiendo, la verdad."
 4180       endif
 4190     endif
 4200     if current_location>=45 and current_location<=47
 4210       speak "Por favor, Ulfius, cumple tu promesa. Toma la llave en tu mano y abre la puerta de la cueva."
 4220       let location(the_key)=ulfius
 4230       do_takeable the_key
 4240       let ambrosio_follows=true
 4250     endif

 4260   endif

 4270 enddef

 4280 defproc talk_to_the_man

 4290   if not talked_to_the_man
 4300     speak "Me llamo Ulfius y..."
 4310     let talked_to_the_man=true
 4320     narrate "El hombre asiente, impaciente."
 4330     speak "Somos refugiados de la gran guerra. Buscamos la paz."
 4340     short_pause
 4350   endif
 4360   if is_it_accessible(the_stone)
 4370     narrate "El hombre se irrita."
 4380     speak "No podemos permitiros huir con la piedra del druida."
 4390     narrate "Hace un gesto..."
 4400     short_pause
 4410     speak "La piedra debe devolverse a su lugar de encierro."
 4420     narrate "Un hombre te arrebata la piedra y se la lleva."
 4430     let location(the_stone)=18
 4440   else
 4450     if is_it_accessible(the_sword)
 4460       narrate "El hombre se enfurece, y alza su mano indicando al norte."
 4470       speak "Nadie portando armas puede pasar."
 4480     else
 4490       let location_exit(28,east)=29
 4500       narrate "El hombre, calmado, indica hacia el este y habla:"
 4510       speak "Si vienes en paz, puedes ir en paz."
 4520       narrate "Todos se apartan y permiten ahora el paso al este."
 4530     endif
 4540   endif

 4550 enddef

 4560 defproc action_fling

 4570   sel on current_location
 4580     =13,16
 4590       narrate "No hay suficiente profundidad."
 4600     =19 
 4610       if (object=the_sword or object=the_stone) and talked_to_the_man
 4620         let location(object)=39
 4630         narrate "La corriente lo arrastra fuertemente, hasta perderlo de vista."
 4640       else
 4650         narrate "No quieres perder eso."
 4660       endif
 4670     =remainder:
 4680       narrate "No tiene sentido tirar nada ahora."
 4690   endsel

 4700 enddef

 4710 defproc action_insert

 4720   sel on complement
 4730     =the_rocks
 4740       if object=the_log
 4750         rocks_and_log
 4760       else
 4770         narrate "No tiene sentido meter eso ahí."
 4780       endif
 4790     =the_idol
 4800       sel on object
 4810         =the_emerald,the_stone
 4820           do_vanish object
 4830           narrate "Encaja. Metido. Desaparece en su interior."
 4840           if is_it_vanished(the_stone) and is_it_vanished(the_emerald)
 4850             let location_exit(41,south)=42
 4860             narrate "La gran roca se desplaza y deja el paso libre."
 4870           endif
 4880         =remainder
 4890           narrate "No encaja."
 4900       endsel
 4910     =the_lock
 4920       if object=the_key
 4930         narrate "La llave gira fácilmente dentro del candado."
 4940         short_pause
 4950         open_the_door
 4960       else
 4970         narrate "No tiene sentido meter eso ahí."
 4980       endif
 4990     =remainder
 5000       narrate "No tiene sentido meter nada en eso."
 5010   endsel

 5020 enddef

 5030 defproc action_move(direction)

 5040   if location_exit(current_location,direction)
 5050     let current_location=location_exit(current_location,direction)
 5060     action_look
 5070   else
 5080     narrate "No es posible."
 5090   endif

 5100 enddef

 5110 defproc action_inventory

 5120   loc i,list$
 5130   let list$=""

 5140   for i=1 to things
 5150     if location(i)=ulfius:let list$=list$&"  - "&thing$(i)&nl$
 5160   endfor i
 5170   if len(list$)
 5180     narrate "Llevo conmigo:"&nl$&list$
 5190   else
 5200     narrate "No llevo nada conmigo."
 5210   endif

 5220 enddef

 5230 defproc action_look

 5240   clear_screen
 5250   describe location_description$(current_location)
 5260   location_plot
 5270   list_present_things 

 5280 enddef

 5290 defproc list_present_things

 5300   loc n,list$

 5310   let list$=""
 5320   for n=1 to things
 5330     if location(n)=current_location
 5340       if is_it_a_person(n)
 5350         let list$=list$&"  - "&iso_upper_1$(thing$(n))&nl$
 5360       else
 5370         let list$=list$&"  - "&thing$(n)&nl$
 5380       endif
 5390     endif
 5400   endfor n
 5410   if len(list$)
 5420     narrate "Puedes ver:"&nl$&list$
 5430   endif

 5440 enddef

 5450 rem --------------------------------------------
 5460 rem Intefaz de datos
 5470 rem Data interface

 5480 deffn is_it_a_person(thing)

 5490   ret thing_type(thing)=2

 5500 enddef

 5510 defproc do_takeable(thing)

 5520   let thing_type(thing)=false

 5530 enddef

 5540 defproc do_not_takeable(thing)

 5550   let thing_type(thing)=true

 5560 enddef

 5570 deffn can_be_taken(thing)

 5580   ret not thing_type(thing)

 5590 enddef

 5600 deffn cannot_be_taken(thing)

 5610   ret thing_type(thing)

 5620 enddef

 5630 deffn is_it_here(thing)

 5640   ret location(thing)=current_location

 5650 enddef

 5660 deffn is_it_hold(thing)

 5670   ret location(thing)=ulfius

 5680 enddef

 5690 deffn is_it_accessible(thing)

 5700   ret is_it_hold(thing) or is_it_here(thing)

 5710 enddef

 5720 defproc do_vanish(thing)

 5730   let location(thing)=limbo

 5740 enddef

 5750 deffn is_it_vanished(thing)

 5760   ret location(thing)=limbo

 5770 enddef

 5780 rem --------------------------------------------
 5790 rem Entrada
 5800 rem Input

 5810 deffn accept$

 5820   rem Devuelve un nuevo comando del usuario, preparado para su análisis.
 5830   rem Return a new user command, formatted for the parsing.

 5840   loc command$
 5850   ink #tw,yellow
 5860   print #tw,"> ";
 5870   let command$=iso_input$(#tw,0)
 5880   if command$(len(command$))<>" ":let command$=command$&" "
 5890   ink #tw,light_grey
 5900   ret command$

 5910 enddef

 5920 deffn iso_input$(channel,max_chars)

 5930   rem Devuelve un texto tecleado por el usuario.
 5940   rem Return a text typed by the user.

 5950   rem channel =
 5960   rem Canal de la ventana a utilizar, en la posición actual del cursor.
 5970   rem Channel of the window to be used, at the current cursor position.
 5980   rem max_chars =
 5990   rem Longitud máxima; si es cero, será la máxima posible en la línea actual con el tamaño actual de letra.
 6000   rem Maximum length. If it's zero, it will be the maximum possible on the current line, with the current character size.

 6010   rem Los caracteres castellanos son convertidos al estándar ISO 8859-1; todas las letras son convertidas a minúsculas;
 6020   rem No permite: espacios iniciales o dobles, dígitos y signos de puntuación.

 6030   rem Spanish chars are translated to ISO 8859-1; all letters are made lowercase.
 6040   rem Not allowed: starting or double spaces, digits and punctuation.

 6050   loc output$,key$,key,cursor_pos,cursor_x0,cursor_y0

 6060   let output$=""
 6070   let cursor_pos=1
 6080   let cursor_x0=pos_x(#channel)
 6090   let cursor_y0=pos_y(#channel)
 6100   if max_chars=0
 6110     let max_chars=char_x(#channel)-cursor_x0/char_w(#channel)-2
 6120   endif
 6130   cursen #channel
 6140   rep typing
 6150     let key$=inkey$(#channel,-1)
 6160     let key=code(key$)
 6170     sel on key
 6180       =2:let mistype_bell_active=not mistype_bell_active:rem Ctrl+B
 6190       =enter:if len(output$):exit typing:else mistype_bell
 6200       =space:type_space
 6210       =65 to 90:type chr$(key+32)
 6220       =97 to 122:type key$
 6230       =131,163:type chr$(233):rem é/É 
 6240       =135,167:type chr$(252):rem ü/Ü 
 6250       =137,169:type chr$(241):rem ñ/Ñ 
 6260       =140:type chr$(225):rem á 
 6270       =147:type chr$(237):rem í 
 6280       =150:type chr$(243):rem ó 
 6290       =153:type chr$(250):rem ú 
 6300       =192:cursor_left
 6310       =193:start_of_line:rem Alt+Left
 6320       =194:backspace_char:rem Ctrl+Left
 6330       =196:previous_word:rem Shift+Left
 6340       =200:cursor_right
 6350       =201:end_of_line:rem Alt+Right
 6360       =202:delete_char:rem Ctrl+Right
 6370       =204:next_word:rem Shift+Right
 6380     endsel 
 6390   endrep typing
 6400   curdis #channel
 6410   print #channel\\\
 6420   ret output$

 6430 enddef

 6440 defproc type(char$)

 6450   rem Si hay espacio, añade al texto el caracter indicado y lo imprime.
 6460   rem If there is space, add the given character and type it.

 6470   if len(output$)<max_chars
 6480     sel on cursor_pos
 6490     =len(output$)+1
 6500       let output$=output$&char$
 6510       let cursor_pos=cursor_pos+1
 6520     =remainder
 6530       let output$=output$(1 to cursor_pos-1)&char$&output$(cursor_pos to)
 6540     endsel
 6550     show_input
 6560   else
 6570     mistype_bell
 6580   endif

 6590 enddef

 6600 defproc type_space

 6610   if cursor_pos=1
 6620     mistype_bell
 6630   else
 6640     if cursor_pos>len(output$)
 6650       if output$(cursor_pos-1)=" "
 6660         mistype_bell
 6670       else
 6680         type " "
 6690       endif
 6700     else
 6710       if output$(cursor_pos)=" " or output$(cursor_pos-1)=" "
 6720         mistype_bell
 6730       else
 6740         type " "
 6750       endif
 6760     endif
 6770   endif

 6780 enddef

 6790 defproc start_of_line

 6800   let cursor_pos=1
 6810   set_cursor cursor_pos

 6820 enddef

 6830 defproc end_of_line

 6840   let cursor_pos=len(output$)+1
 6850   set_cursor cursor_pos

 6860 enddef

 6870 defproc backspace_char

 6880   rem Si es posible, borra el carácter a la izquierda del cursor
 6890   rem If possible, delete the character at the left of the cursor.

 6900   loc original$

 6910   if len(output$)
 6920     if cursor_pos=1
 6930         mistype_bell
 6940     else
 6950       let original$=output$
 6960       let output$=original$(1 to cursor_pos-2)
 6970       if cursor_pos<=len(original$)
 6980         let output$=output$&original$(cursor_pos to)
 6990       endif
 7000       let cursor_pos=cursor_pos-1
 7010       show_input
 7020     endif
 7030   else
 7040     mistype_bell
 7050   endif

 7060 enddef

 7070 defproc delete_char

 7080   rem Si es posible, borra el carácter bajo el cursor.
 7090   rem If possible, delete the character under the cursor.

 7100   loc original$

 7110   if len(output$)
 7120     if cursor_pos=len(output$)+1
 7130       mistype_bell
 7140     else
 7150       let original$=output$
 7160       let output$=original$(1 to cursor_pos-1)
 7170       if cursor_pos<len(original$)
 7180         let output$=output$&original$(cursor_pos+1 to)
 7190       endif
 7200      show_input
 7210     endif
 7220   else
 7230     mistype_bell
 7240   endif

 7250 enddef

 7260 defproc cursor_left

 7270   rem Si es posible, desplaza el cursor un carácter a la izquierda.
 7280   rem If possible, move the cursor one character left.

 7290   if cursor_pos>1
 7300     curdis #channel
 7310     let cursor_pos=cursor_pos-1
 7320     set_cursor cursor_pos
 7330     cursen #channel
 7340   else
 7350     mistype_bell
 7360   endif

 7370 enddef

 7380 defproc cursor_right

 7390   rem Si es posible, desplaza el cursor un carácter a la derecha.
 7400   rem If possible, move the cursor one character right.

 7410   if cursor_pos<len(output$)+1
 7420     curdis #channel
 7430     let cursor_pos=cursor_pos+1
 7440     set_cursor cursor_pos
 7450     cursen #channel
 7460   else
 7470     mistype_bell
 7480   endif

 7490 enddef

 7500 defproc previous_word

 7510   rem Si es posible, desplaza el cursor al inicio de la palabra anterior.
 7520   rem If possible, move the cursor to the start of the previous word.

 7530   loc temp
 7540   loc from_char,to_char

 7550   if cursor_pos=1

 7560     mistype_bell

 7570   else

 7580     let temp=0
 7590     let to_char=code(output$(cursor_pos-(cursor_pos>len(output$))))
 7600     let from_char=to_char

 7610     rep search
 7620       if not ((cursor_pos>1) and not(from_char<>space and to_char=space and temp>1)):exit search
 7630         let from_char=to_char
 7640         let cursor_pos=cursor_pos-1
 7650         let temp=temp+1
 7660         let to_char=code(output$(cursor_pos))
 7670     endrep search
 7680     let cursor_pos=cursor_pos+(cursor_pos<>1)
 7690     set_cursor cursor_pos
 7700     show_input

 7710   endif

 7720 enddef

 7730 defproc next_word

 7740   rem Si es posible, desplaza el cursor al inicio de la palabra siguiente (o al final de la última palabra).
 7750   rem If possible, move the cursor to the start of the next word (or to the end of the last word).

 7760   loc from_char,to_char

 7770   if cursor_pos>len(output$)
 7780     mistype_bell
 7790   else
 7800     let to_char=code(output$(cursor_pos))
 7810     let from_char=to_char
 7820     rep search
 7830     if not ((cursor_pos<len(output$)) and not(from_char=space and to_char<>space)):exit search
 7840       let from_char=to_char
 7850       let cursor_pos=cursor_pos+1
 7860       let to_char=code(output$(cursor_pos))
 7870     endrep search
 7880     let cursor_pos=cursor_pos+(cursor_pos=len(output$))
 7890     set_cursor cursor_pos
 7900     show_input
 7910   endif

 7920 enddef

 7930 defproc show_input

 7940   rem Muestra el texto actual.
 7950   rem Show the current text.

 7960   curdis #channel
 7970   set_cursor 1
 7980   print #channel,output$;
 7990   cls #channel,4
 8000   rem print #channel,output$;fill$(" ",max_chars-len(output$))
 8010   set_cursor cursor_pos
 8020   cursen #channel

 8030 enddef

 8040 defproc set_cursor(column)

 8050   rem Sitúa el cursor de texto en la posición de pixeles correspondiente a la columna indicada (que es relativa al texto que se está escribiendo).
 8060   rem Set the text cursor at the pixel position of the given column (which is relative to the typed text).

 8070   cursor #channel,cursor_x0+(column-1)*char_w(#channel),cursor_y0

 8080 enddef

 8090 defproc mistype_bell

 8100   if mistype_bell_active:beep 1000,0

 8110 enddef

 8120 deffn yes(question$)

 8130   rem Muestra la pregunta indicada y espera la pulsación de las teclas S o N (sin distinguir minúsculas de mayúsculas). Devuelve 1 si se pulsó S; 0 si se pulsó N.
 8140   rem Show the given question and wait for S or N to be pressed (ignoring case). Return 1 if S was pressed; 0 otherwise.

 8150   loc answer$

 8160   print #tw,question$!"(S/N)"!;
 8170   rep answer
 8180     let answer$=inkey$(#tw)
 8190     if answer$ instr "sn":exit answer
 8200   endrep answer
 8210   ret answer$ instr "s"

 8220 enddef

 8230 defproc end_of_scene

 8240   rem Muestra un presto y hace una pausa larga. 
 8250   rem Show a prompt and do a long pause.

 8270   ink #tw,dark_green
 8280   print #tw,"..."\\
 8290   long_pause

 8300 enddef

 8310 defproc short_pause

 8320   rem Hace una pausa corta; se usa entre ciertos párrafos.
 8330   rem Do a short pause; used between certain paragraphs.

 8340   wait_for_key_press(2)

 8350 enddef

 8360 defproc long_pause

 8370   rem Hace una pausa larga; se usa tras cada escena.
 8380   rem Do a long pause; used after every scene.

 8390   wait_for_key_press(16)

 8400 enddef

 8410 defproc wait_for_key_press(seconds)

 8420   rem Espera los segundos indicados, o hasta que se pulse una tecla.
 8430   rem Wait the given seconds, or until a key is pressed.

 8440   loc start_time
 8450   let start_time=date

 8460   rep dont_press_a_key
 8470     if inkey$(#tw)="" or date>start_time+seconds
 8480       exit dont_press_a_key
 8490     endif
 8500   endrep dont_press_a_key
 8510   rep press_a_key
 8520     if inkey$(#tw)<>"" or date>start_time+seconds
 8530       exit press_a_key
 8540     endif
 8550   endrep press_a_key

 8560 enddef

 8570 rem --------------------------------------------
 8580 rem Cadenas
 8590 rem Strings

 8600 deffn iso_upper(char)

 8610   rem Devuelve el código de mayúscula correspondiente al carácter ISO 8859-1 indicado.
 8620   rem Return the uppercase char code of the given ISO 8859-1 char.

 8630   loc c:let c=char:rem QDOS y Minerva necesitan esto / QDOS and Minerva need this
 8640   sel on c
 8650     =97 to 122,224 to 246,248 to 254:ret c-32
 8660     =remainder:ret c
 8670   endsel

 8680 enddef

 8690 deffn iso_upper$(text$)

 8700   rem Devuelve en mayúsculas un texto ISO 8859-1.
 8710   rem Return the given ISO 8859-1 text in uppercase.

 8720   loc i,upper_text$
 8730   let upper_text$=text$
 8740   for i=1 to len(upper_text$)
 8750     let upper_text$(i)=chr$(iso_upper(code(text$(i))))
 8760   endfor i
 8770   ret upper_text$

 8780 enddef

 8790 deffn iso_upper_1$(text$)

 8800   rem Devuelve el texto ISO 8859-1 dado, con la primera letra en mayúlculas.
 8810   rem Return the given ISO 8859-1 text with the first letter in uppercase.

 8820   ret iso_upper$(text$(1))&text$(2 to)

 8830 enddef

 8840 rem --------------------------------------------
 8850 rem Pantalla
 8860 rem Screen

 8870 defproc clear_screen

 8880   ink #tw,light_grey:cls #tw

 8890 enddef

 8900 rem --------------------------------------------
 8910 rem Salida de textos
 8920 rem Text output

 8930 defproc speak(quote$)

 8940   rem Imprime una cita de un diálogo, con las comillas adecuadas.
 8950   rem Print a dialog quote, with the proper quote chars.

 8960   loc last
 8970   ink #tw,yellow
 8980   if r_quote$ instr quote$
 8990     tell l_quote$&quote$
 9000   else
 9010     let last=len(quote$)
 9020     if quote$(last)="." and quote$(last-1)<>"."
 9030       tell l_quote$&quote$(1 to last-1)&r_quote$&"."
 9040     else
 9050       tell l_quote$&quote$&r_quote$
 9060     endif
 9070   endif

 9080 enddef

 9090 defproc describe(txt$)

 9100   rem Imprime la descripción de un escenario.
 9110   rem Print a location description.

 9120   ink #tw,dark_cyan:tell txt$

 9130 enddef

 9140 defproc narrate(txt$)

 9150   rem !!!

 9160   ink #tw,light_grey:tell txt$

 9170 enddef

 9180 defproc tell(txt$)

 9190   rem Imprime un texto justificado a la izquierda.
 9200   rem Print a text, left justified.

 9210   loc text$,first,last

 9220   if len(txt$)
 9230     let text$=txt$&" "
 9240     let first=1
 9250     for last=1 to len(text$)
 9260       if text$(last)=" "
 9270         print #tw,!text$(first to last-1);
 9280         let first=last+1
 9290       endif
 9300     endfor last
 9310   endif
 9320   print #tw,\\

 9330 enddef

 9340 rem --------------------------------------------
 9350 rem Acerca de
 9360 rem About

 9370 defproc about

 9380   clear_screen
 9390   ink #tw,light_red:print #tw,"Asalto y castigo"
 9400   ink #tw,dark_cyan
 9410   print #tw,\"Por Baltasar el Arquero, 2009"
 9420   print #tw,"http://caad.es/baltasarq/"
 9430   print #tw,\"Reescrita en SuperBASIC para QL por"
 9440   print #tw,"Marcos Cruz (programandala.net), 2011"
 9450   print #tw,"http://programandala.net/"
 9460   print #tw,"Versión"!version$
 9470   ink #tw,light_grey
 9480   print #tw,\\"http://www.caad.es/"
 9490   print #tw,"http://www.sinclairql.es/"\\\

 9500 enddef

 9510 defproc intro

 9520   clear_screen
 9530   narrate "El sol despunta de entre la niebla, haciendo humear los tejados de paja."
 9540   short_pause
 9550   narrate "Piensas en el encargo realizado por Uther Pendragón. Atacar una aldea tranquila, aunque sea una llena de sajones, no te llena de orgullo."
 9560   short_pause
 9570   narrate "Los hombres se ciernen sobre la aldea, y la destruyen. No hubo tropas enemigas, ni honor en la batalla."
 9580   end_of_scene:clear_screen
 9590   speak "Sire Ulfius, la batalla ha terminado."
 9600   narrate "Lentamente, das la orden de volver a casa. Los oficiales detienen como pueden el saqueo."
 9610   end_of_scene:clear_screen

 9620 enddef

 9630 rem --------------------------------------------
 9640 rem Inicialización
 9650 rem Init

 9660 defproc first_time_init

 9670   rem Inicialización necesaria solo una vez.
 9680   rem Init needed only once.

 9690   init_the_constants
 9700   init_the_preferences
 9710   clear_screen

 9720 enddef

 9730 defproc game_init

 9740   rem Inicialización necesaria antes de cada partida.
 9750   rem Init needed before every game.

 9760   loc y
 9770   let y=pos_y(#tw)
 9780   print #tw,"Preparando los datos..."
 9790   init_the_flags
 9800   init_the_data
 9810   let current_location=1
 9820   cls #tw,3
 9830   cursor #tw,0,y

 9840 enddef

 9850 defproc init_the_preferences

 9860   let mistype_bell_active=true

 9870 enddef

 9880 defproc init_the_constants

 9890   rem Varios
 9900   rem Misc
 9910   let space=32:rem char code
 9920   let enter=10:rem char code
 9930   let nl$=chr$(enter):rem new line
 9940   let l_quote$="«":rem castilian left quote
 9950   let r_quote$="»":rem castilian right quote
 9960   let limbo=255:rem location of vanished things

 9970   rem Action syntax flags
 9980   rem Indicadores de sintaxis de las acciones
 9990   let no_object_needed=0
10000   let object_needed=1
10010   let object_and_complement_needed=2

10020   rem Mensajes de error
10030   rem Error messages 
10040   rem tmp!!!
10050   let not_seen$="No lo veo, o no es importante."
10060   let i_dont_have_it$="No llevo eso conmigo."
10070   let not_with_that$="Con eso no..."
10080   let not_by_hand$="En cualquier caso, no con las manos desnudas."

10090   rem Identificadores de acciones
10100   rem Action ids
10110   let to_go_down=1
10120   let to_open=2
10130   let to_go_up=3
10140   let to_break=4
10150   let to_help=5
10160   let to_swim=6
10170   let to_take=7
10180   let to_drop=8
10190   let to_go_east=9
10200   let to_examine=10
10210   let to_speak=11
10220   let to_insert=12
10230   let to_look=13
10240   let to_go_north=14
10250   let to_go_west=15
10260   let to_go_south=16
10270   let to_finish=17
10280   let to_fling=18

10290   rem Identificadores de cosas
10300   rem Thing ids
10310   let ulfius=0
10320   let the_altar=1
10330   let ambrosio=2
10340   let the_torch=3
10350   let the_flags=4
10360   let the_cloak=5
10370   let the_waterfall=6
10380   let the_fallen_away=7
10390   let the_emerald=8
10400   let the_sword=9
10410   let the_rags=10
10420   let the_thread=11
10430   let the_man=12
10440   let the_idol=13
10450   let the_lake=14
10460   let the_key=15
10470   let the_flint=16
10480   let the_stone=17
10490   let the_door=18
10500   let the_rocks=19
10510   let the_snake=20
10520   let the_log=21
10530   let the_piece=22
10540   let the_lock=23

10550   rem Identificadores de direcciones
10560   rem Direction ids
10570   let north=0
10580   let south=1
10590   let east=2
10600   let west=3
10610   let up=4
10620   let down=5
10630   let first_direction=north
10640   let last_direction=down

10650 enddef

10660 defproc init_the_flags

10670   rem Inicializa los indicadores del juego.
10680   rem Init the game flags.

10690   let ambrosio_follows=false:rem Ambrosio nos sigue?
10700   let saxons_follow=false:rem Los sajones nos siguen?
10710   let talked_to_the_man=false:rem Hemos hablado con el hombre?
10720   let hacked_the_log=false:rem Hemos afilado el tronco?
10730   let lit_the_torch=true:rem Está la antorcha encendida?
10740   let start_over=false:rem Empezar una nueva partida?

10750 enddef

10760 defproc init_the_data

10770   rem Inicializa las matrices de datos.
10780   rem Init the data arrays.

10790   loc i,j,max_word_lenght,action

10800   let max_word_lenght=11

10810   rem tmp!!!
10820   rem Nota/Note:
10830   rem El primer elemento (0) de las matrices no se usa.
10840   rem The first element (0) of arrays is not used.

10850   restore

10860   let locations=lines_between("label_location_descriptions_start","label_location_descriptions_end")
10870   dim location_description$(locations,255)
10880   for i=1 to locations
10890     read location_description$(i)
10900   endfor i

10910   dim location_exit(locations,last_direction)
10920   for i=1 to locations
10930     for j=first_direction to last_direction
10940       read location_exit(i,j)
10950     endfor j
10960   endfor i

10970   let nouns=lines_between("label_nouns_start","label_nouns_end")
10980   dim noun$(nouns,max_word_lenght)
10990   dim the_thing(nouns)
11000   let things=lines_between("label_things_start","label_things_end")/2
11010   dim thing$(things,max_word_lenght)

11020   rem Nota/Note:
11030   rem El último sinónimo listado será el nombre principal de cada cosa.
11040   rem Lhe last synonym on the list will be the actual thing name.
11050   for i=1 to nouns
11060     read the_thing(i),noun$(i)
11070     let thing$(the_thing(i))=noun$(i)
11080   endfor i

11090   dim location(things)
11100   dim thing_type(things)
11110   dim thing_description$(things,128)
11120   for i=1 to things
11130     read thing
11140     read location(thing),thing_type(thing)
11150     read thing_description$(thing)
11160   endfor i

11170   let actions=lines_between("label_actions_start","label_actions_end")
11180   dim action_syntax(actions)
11190   for i=1 to actions
11200     read action
11210     read action_syntax(action)
11220   endfor i

11230   let verbs=lines_between("label_verbs_start","label_verbs_end")
11240   dim verb$(verbs,max_word_lenght)
11250   dim the_action(verbs)
11260   let action=1
11270   let last_action=0
11280   for i=1 to verbs
11290     read the_action(i),verb$(i)
11300   endfor i

11310 enddef

11320 rem --------------------------------------------
11330 rem Datos
11340 rem Data

11350 rem Descripciones de los escenarios
11360 rem Location descriptions

11370 defproc label_location_descriptions_start:enddef
11380 data "Aldea Sajona. No ha quedado nada en pie, ni piedra sobre piedra. El entorno es desolador. Solo resta volver al sur, a casa."
11390 data "Sobre la colina, casi sobre la niebla de la aldea sajona arrasada al norte, a tus pies. El camino desciende hacia el oeste."
11400 data "Camino entre colinas. El camino avanza por el valle, desde la parte alta, al este, a una zona harto boscosa, al oeste."
11410 data "Cruce de caminos. Una senda parte al oeste, a la sierra por el paso del Perro, y otra hacia el norte, por un frondoso bosque que la rodea."
11420 data "Desde la linde, al sur, hacia el oeste se extiende frondoso el bosque que rodea la sierra. La salida se abre hacia el sur."
11430 data "Bosque. Jirones de niebla se enzarcen en frondosas ramas y arbustos. La senda serpentea entre raíces, de un luminoso este al oeste."
11440 data "Paso del Perro. Abruptamente, del bosque se pasa a un estrecho camino entre altas rocas. El inquietante desfiladero tuerce de este a sur."
11450 data "Entrada a la cueva. El paso entre el desfiladero sigue de norte a este. La entrada a una cueva se abre al sur en la pared de roca."
11460 data "Derrumbe. El camino desciende hacia la agreste sierra, al oeste, desde los verdes valles al este. Pero un gran derrumbe bloquea la sierra."
11470 data "Gruta de entrada. El estrecho paso se adentra hacia el oeste, desde la boca, al norte. "
11480 data "Gran lago. Una gran estancia alberga un lago de profundas e iridiscentes aguas, debido a la luz exterior. No hay otra salida que el este."
11490 data "Salida del paso secreto. Una gran estancia se abre hacia el oeste, y se estrecha hasta morir, al este, en una parte de agua."
11500 data "Puente semipodrido. La sala se abre en semioscuridad a un puente cubierto de podredumbre sobre el lecho de un canal, de este a oeste."
11510 data "Recodo de la cueva. La iridiscente cueva gira de este a sur."
11520 data "Pasaje arenoso. La gruta desciende de norte a sur sobre un lecho arenoso. Al este, un agujero del que llega claridad."
11530 data "Pasaje del agua. Como un acueducto, el agua baja con gran fuerza de norte a este, aunque la salida practicable es la del oeste."
11540 data "Estalactitas. Muchas estalactitas se agrupan encima de tu cabeza, y se abren cual arco de entrada hacia el este y sur."
11550 data "Puente de piedra. Un arco de piedra se eleva, cual puente sobre la oscuridad, de este a oeste. En su mitad, un altar."
11560 data "Recodo arenoso del canal. La furiosa corriente, de norte a este, impide el paso, excepto al oeste. Al fondo, se oye un gran estruendo."
11570 data "Un tramo de cueva estrecho te permite avanzar hacia el norte y el sur; un pasaje surge al este."
11580 data "Un tramo de cueva estrecho te permite avanzar de este a oeste; un pasaje surge al sur."
11590 data "Un tramo de cueva estrecho te permite avanzar de este a oeste; un pasaje surge al sur."
11600 data "Un tramo de cueva estrecho te permite avanzar de oeste a sur."
11610 data "Un tramo de cueva estrecho te permite avanzar de este a norte."
11620 data "Un tramo de cueva estrecho te permite avanzar de este a oeste. Al norte y al sur surgen pasajes."
11630 data "Un tramo de cueva estrecho te permite avanzar de este a oeste. Al norte surge un pasaje."
11640 data "Un tramo de cueva estrecho te permite avanzar al oeste. Al norte surge un pasaje."
11650 data "Refugio. Una amplia estancia de norte a este, hace de albergue a refugiados: hay banderas de ambos bandos. Un hombre anciano te contempla. Los refugiados te rodean."
11660 data "Espiral. Cual escalera de caracol gigante, desciende a las profundidades, dejando a los refugiados al oeste."
11670 data "Inicio de la espiral. Se eleva en la penumbra. La caverna se estrecha ahora como para una sola persona, hacia el este."
11680 data "Puerta norte. En este pasaje grandes rocas se encuentran entre las columnas de un arco de medio punto."
11690 data "Precipicio. El camino ahora no excede de dos palmos de cornisa sobre un abismo insondable. El soporte de roca gira en 'U' de oeste a sur."
11700 data "Pasaje de salida. El paso se va haciendo menos estrecho a medida que se avanza hacia el sur, para entonces comenzar hacia el este."
11710 data "Pasaje de gravilla. El paso se anchea de oeste a norte, y guijarros mojados y mohosos tachonan el suelo de roca."
11720 data "Puente sobre el acueducto. Un puente se tiende de norte a sur sobre el curso del agua. Resbaladizas escaleras descienden hacia el oeste."
11730 data "Remanso. Estruendosa corriente baja con el pasaje elevado desde el oeste, y forma un meandro arenoso. Unas escaleras suben al este."
11740 data "Canal de agua. El agua baja del oeste con renovadas fuerzas, dejando un estrecho paso elevado lateral para avanzar a este o a oeste."
11750 data "Gran Cascada. Cae el agua hacia el este, descendiendo con gran fuerza hacia el canal, no sin antes embalsarse en un lago poco profundo."
11760 data "Interior de la cascada. Musgoso y rocoso, con la cortina de agua tras de ti, el nivel del agua ha crecido un poco en este curioso hueco."
11770 data "Explanada. Una gran explanda enlosetada contempla un bello panorama de estalactitas. Unos casi imperceptibles escalones conducen al este."
11780 data "Ídolo. El ídolo parece un centinela siniestro de una gran roca que se encuentra al sur. Se puede volver a la explanada al oeste."
11790 data "Pasaje estrecho. Como un pasillo que corteja el canal de agua, a su lado, baja de norte a sur. Se aprecia un aumento de luz hacia el sur."
11800 data "Pasaje de la serpiente. El pasaje sigue de norte a sur."
11810 data "Lago interior. Unas escaleras dan paso a un hermoso lago interior, y siguen hacia el oeste. Al norte, un oscuro y estrecho pasaje sube."
11820 data "Cruce de pasajes. Estrechos pasos permiten ir al oeste, al este (menos oscuro), y al sur, un lugar de gran luminosidad."
11830 data "Hogar de Ambrosio. Un catre, algunas velas y una mesa es todo lo que tiene Ambrosio."
11840 data "Salida de la cueva. Por el oeste, una puerta impide, cuando cerrada, la salida de la cueva. Se adivina la luz diurna al otro lado."
11850 data "Bosque a la entrada. Apenas se puede reconocer la entrada de la cueva, al este. El sendero sale del bosque hacia el oeste."
11860 data "Sendero del bosque. El sendero recorre esta parte del bosque de este a oeste."
11870 data "Camino norte. El camino norte de Westmorland se interna hacia el bosque, al norte (en tu estado no puedes ir), y a Westmorland, al sur."
11880 data "Westmorland. La villa bulle de actividad con el mercado en el centro de la plaza, donde se encuentra el castillo."
11890 defproc label_location_descriptions_end:enddef

11900 rem Salidas de los escenarios
11910 rem Location exits

11920 rem  datos: n,s,e,o,ar,ab
11930 rem  data: n,s,e,w,d,u
11940 data 0,2,0,0,0,0
11950 data 1,0,0,3,0,0
11960 data 0,0,2,4,0,0
11970 data 5,0,3,9,0,0
11980 data 0,4,0,6,0,0
11990 data 0,0,5,7,0,0
12000 data 0,8,6,0,0,0
12010 data 7,10,0,0,0,0
12020 data 0,0,4,0,0,0
12030 data 8,0,0,11,0,0
12040 data 0,0,10,0,0,0
12050 data 0,0,0,13,0,0
12060 data 0,0,12,14,0,0
12070 data 0,15,13,0,0,0
12080 data 14,17,16,0,0,0
12090 data 0,0,0,15,0,0
12100 data 15,20,18,0,0,0
12110 data 0,0,19,17,0,0
12120 data 0,0,0,18,0,0
12130 data 17,22,25,0,0,0
12140 data 0,27,23,20,0,0
12150 data 0,24,27,22,0,0
12160 data 0,25,0,21,0,0
12170 data 22,0,26,0,0,0
12180 data 22,28,23,21,0,0
12190 data 26,0,20,27,0,0
12200 data 27,0,0,25,0,0
12210 data 26,0,0,0,0,0
12220 data 0,0,0,28,0,30
12230 data 0,0,31,0,29,0
12240 data 0,0,0,30,0,0
12250 data 0,33,0,31,0,0
12260 data 32,0,34,0,0,0
12270 data 35,0,0,33,0,0
12280 data 40,34,0,36,0,36
12290 data 0,0,35,37,35,0
12300 data 0,0,36,38,0,0
12310 data 0,0,37,39,0,0
12320 data 0,0,38,0,0,0
12330 data 0,35,41,0,0,0
12340 data 0,0,0,40,0,0
12350 data 41,43,0,0,0,0
12360 data 42,0,0,0,0,0
12370 data 43,0,0,45,0,0
12380 data 0,47,44,46,0,0
12390 data 0,0,45,0,0,0
12400 data 45,0,0,0,0,0
12410 data 0,0,47,49,0,0
12420 data 0,0,48,50,0,0
12430 data 0,51,49,0,0,0
12440 data 50,0,0,0,0,0

12450 rem Nombres
12460 rem Nouns

12470 rem datos: identificador de cosa, nombre
12480 rem (para cada identificador de cosa, el último nombre listado será el principal)
12490 rem data: thing id, noun
12500 rem (for every thing id, the last noun listed will be the main one) 
12510 defproc label_nouns_start:enddef
12520 data ambrosio,"ambrosio"
12530 data the_altar,"altar"
12540 data the_cloak,"capa"
12550 data the_door,"puerta"
12560 data the_emerald,"joya"
12570 data the_emerald,"esmeralda"
12580 data the_fallen_away,"derrumbe"
12590 data the_flags,"enseñas"
12600 data the_flags,"pendones"
12610 data the_flags,"banderas"
12620 data the_flint,"pedernal"
12630 data the_idol,"agujero"
12640 data the_idol,"ojo"
12650 data the_idol,"ídolo"
12660 data the_key,"llave"
12670 data the_lake,"agua"
12680 data the_lake,"laguna"
12690 data the_lake,"lago"
12700 data the_lock,"cerrojo"
12710 data the_lock,"cierre"
12720 data the_lock,"candado"
12730 data the_log,"leño"
12740 data the_log,"madero"
12750 data the_log,"tronco"
12760 data the_man,"anciano"
12770 data the_man,"jefe"
12780 data the_man,"viejo"
12790 data the_man,"hombre"
12800 data the_piece,"pedazo"
12810 data the_piece,"trozo"
12820 data the_rags,"harapo"
12830 data the_rocks,"rocas"
12840 data the_snake,"culebra"
12850 data the_snake,"ofidio"
12860 data the_snake,"reptil"
12870 data the_snake,"serpiente"
12880 data the_stone,"piedra"
12890 data the_sword,"arma"
12900 data the_sword,"tizona"
12910 data the_sword,"espada"
12920 data the_thread,"hebra"
12930 data the_thread,"hilo"
12940 data the_torch,"antorcha"
12950 data the_waterfall,"catarata"
12960 data the_waterfall,"cascada"
12970 defproc label_nouns_end:enddef

12980 rem Cosas
12990 rem Things

13000 rem datos: identificador,escenario,tipo,descripción
13010 rem data: id,location,type,description
13020 defproc label_things_start:enddef
13030 data the_altar,18,1
13040 data "Justo en la mitad del puente, debe sostener algo importante."
13050 data ambrosio,19,2
13060 data "Ambrosio es un hombre de mediana edad, que te mira afable."
13070 data the_torch,limbo,0
13080 data "Está apagada."
13090 data the_flags,28,1
13100 data "Son las banderas britana y sajona. Dos dragones rampantes, rojo y blanco, enfrentados."
13110 data the_cloak,ulfius,0
13120 data "Tu capa de general, de fina lana tintada de negro."
13130 data the_waterfall,38,1
13140 data "No ves nada por la cortina de agua. El lago es muy poco profundo."
13150 data the_fallen_away,9,1
13160 data "Muchas, inalcanzables rocas, apiladas una sobre otra."
13170 data the_emerald,39,0
13180 data "Es preciosa."
13190 data the_sword,ulfius,0
13200 data "Legado de tu padre, fiel herramienta en mil batallas."
13210 data the_rags,limbo,0
13220 data "Un trozo un poco grande de capa."
13230 data the_thread,limbo,0
13240 data "Un hilo se ha desprendido al cortar la capa con la espada."
13250 data the_man,28,1
13260 data "Es el jefe de los refugiados."
13270 data the_idol,41,1
13280 data "El ídolo tiene dos agujeros por ojos."
13290 data the_lake,44,1
13300 data "La luz entra por un resquicio, y caprichosos reflejos te maravillan."
13310 data the_key,46,1
13320 data "Una llave grande, de hierro herrumboso."
13330 data the_flint,limbo,0
13340 data "Se trata de una dura y afilada piedra."
13350 data the_stone,18,0
13360 data "Recia y pesada, pero no muy grande, de forma piramidal."
13370 data the_door,47,1
13380 data "Muy recia y con un gran candado."
13390 data the_rocks,31,1
13400 data "Son muchas, aunque parecen ligeras y con huecos entre ellas."
13410 data the_snake,43,1
13420 data "Una serpiente bloquea el paso al sur, corriendo a su lado el agua."
13430 data the_log,15,0
13440 data "Es un tronco recio, pero de liviano peso."
13450 data the_piece,limbo,0
13460 data "Es un poco de lo que antes era tu capa."
13470 data the_lock,47,1
13480 data "Está cerrado. Es muy grande y parece resistente."
13490 defproc label_things_end:enddef

13500 rem Acciones
13510 rem Actions

13520 rem datos: identificador de acción, sintaxis de la acción 
13530 rem data: action id,action syntax 
13540 defproc label_actions_start:enddef
13550 data to_break,object_needed
13560 data to_drop,object_needed
13570 data to_examine,no_object_needed
13580 data to_finish,no_object_needed
13590 data to_fling,object_needed
13600 data to_go_down,no_object_needed
13610 data to_go_east,no_object_needed
13620 data to_go_north,no_object_needed
13630 data to_go_south,no_object_needed
13640 data to_go_up,no_object_needed
13650 data to_go_west,no_object_needed
13660 data to_help,no_object_needed
13670 data to_insert,object_and_complement_needed
13680 data to_look,no_object_needed
13690 data to_open,object_needed
13700 data to_swim,no_object_needed
13710 data to_take,object_needed
13720 data to_speak,object_needed
13730 defproc label_actions_end:enddef

13740 rem Verbos 
13750 rem Verbs 

13760 rem datos: identificador de acción, verbo o sinónimo
13770 rem data: action id,verb or synonym
13780 defproc label_verbs_start:enddef
13790 data to_break,"afila"
13800 data to_break,"afilar"
13810 data to_break,"ataca"
13820 data to_break,"atacar"
13830 data to_break,"corta"
13840 data to_break,"cortar"
13850 data to_break,"destroza"
13860 data to_break,"destrozar"
13870 data to_break,"empuja"
13880 data to_break,"empujar"
13890 data to_break,"golpea"
13900 data to_break,"golpear"
13910 data to_break,"mata"
13920 data to_break,"matar"
13930 data to_break,"recorta"
13940 data to_break,"recortar"
13950 data to_break,"rompe"
13960 data to_break,"romper"
13970 data to_break,"sacude"
13980 data to_break,"sacudir"
13990 data to_drop,"deja"
14000 data to_drop,"dejar"
14010 data to_drop,"desprenderse"
14020 data to_drop,"despréndete"
14030 data to_drop,"soltar"
14040 data to_drop,"suelta"
14050 data to_examine,"ex"
14060 data to_examine,"examina"
14070 data to_examine,"examinar"
14080 data to_examine,"examinarte"
14090 data to_examine,"examínate"
14100 data to_examine,"i"
14110 data to_examine,"mírate"
14120 data to_finish,"acaba"
14130 data to_finish,"acabar"
14140 data to_finish,"fin"
14150 data to_finish,"finaliza"
14160 data to_finish,"finalizar"
14170 data to_finish,"rendirse"
14180 data to_finish,"ríndete"
14190 data to_finish,"termina"
14200 data to_finish,"terminar"
14210 data to_fling,"arroja"
14220 data to_fling,"arrojar"
14230 data to_fling,"lanza"
14240 data to_fling,"lanzar"
14250 data to_fling,"tira"
14260 data to_fling,"tirar"
14270 data to_go_down,"abajo"
14280 data to_go_down,"baja"
14290 data to_go_down,"bajar"
14300 data to_go_down,"descender"
14310 data to_go_down,"desciende"
14320 data to_go_east,"e"
14330 data to_go_east,"este"
14340 data to_go_north,"n"
14350 data to_go_north,"norte"
14360 data to_go_south,"s"
14370 data to_go_south,"sur"
14380 data to_go_up,"arriba"
14390 data to_go_up,"ascender"
14400 data to_go_up,"asciende"
14410 data to_go_up,"sube"
14420 data to_go_up,"subir"
14430 data to_go_west,"o"
14440 data to_go_west,"oeste"
14450 data to_help,"auxilio"
14460 data to_help,"ayuda"
14470 data to_help,"ayudar"
14480 data to_help,"ayúdame"
14490 data to_help,"socorro"
14500 data to_insert,"coloca"
14510 data to_insert,"colocar"
14520 data to_insert,"introduce"
14530 data to_insert,"introducir"
14540 data to_insert,"mete"
14550 data to_insert,"meter"
14560 data to_insert,"pon"
14570 data to_insert,"poner"
14580 data to_insert,"situar"
14590 data to_insert,"sitúa"
14600 data to_look,"m"
14610 data to_look,"mira"
14620 data to_look,"mirar"
14630 data to_look,"ojea"
14640 data to_look,"ojear"
14650 data to_open,"abre"
14660 data to_open,"abrir"
14670 data to_swim,"bañar"
14680 data to_swim,"bañarse"
14690 data to_swim,"bucea"
14700 data to_swim,"bucear"
14710 data to_swim,"báñate"
14720 data to_swim,"nada"
14730 data to_swim,"nadar"
14740 data to_swim,"zambullirse"
14750 data to_swim,"zambúllete"
14760 data to_take,"agarra"
14770 data to_take,"agarrar"
14780 data to_take,"coge"
14790 data to_take,"coger"
14800 data to_take,"toma"
14810 data to_take,"tomar"
14820 data to_speak,"charla"
14830 data to_speak,"charlar"
14840 data to_speak,"comenta"
14850 data to_speak,"comentar"
14860 data to_speak,"comentarle"
14870 data to_speak,"comentarlo"
14880 data to_speak,"comentárselo"
14890 data to_speak,"comunica"
14900 data to_speak,"comunicar"
14910 data to_speak,"comunicarle"
14920 data to_speak,"comunicarlo"
14930 data to_speak,"comunicárselo"
14940 data to_speak,"comunícale"
14950 data to_speak,"comunícalo"
14960 data to_speak,"coméntale"
14970 data to_speak,"coméntalo"
14980 data to_speak,"coméntaselo"
14990 data to_speak,"conversa"
15000 data to_speak,"conversar"
15010 data to_speak,"decir"
15020 data to_speak,"decirle"
15030 data to_speak,"decirlo"
15040 data to_speak,"decírselo"
15050 data to_speak,"di"
15060 data to_speak,"dile"
15070 data to_speak,"dilo"
15080 data to_speak,"díselo"
15090 data to_speak,"habla"
15100 data to_speak,"hablar"
15110 data to_speak,"hablarle"
15120 data to_speak,"háblale"
15130 data to_speak,"háblalo"
15140 data to_speak,"platica"
15150 data to_speak,"platicar"
15160 data to_speak,"platicarle"
15170 data to_speak,"platicarlo"
15180 data to_speak,"platicárselo"
15190 data to_speak,"platícale"
15200 data to_speak,"platícalo"
15210 data to_speak,"pregunta"
15220 data to_speak,"preguntar"
15230 data to_speak,"preguntarle"
15240 data to_speak,"preguntarlo"
15250 data to_speak,"preguntárselo"
15260 data to_speak,"pregúntale"
15270 data to_speak,"pregúntalo"
15280 defproc label_verbs_end:enddef

15290 rem --------------------------------------------
15300 rem Meta

15310 deffn lines_between(procedure_1$,procedure_2$)

15320   rem Devuelve el número de líneas de programa entre dos procedimientos o funciones.
15330   rem Return the number of program lines between two procedure or functions.

15340   loc line_step
15350   let line_step=10
15360   ret (lnum(procedure_2$)-lnum(procedure_1$))/line_step-1

15370 enddef

15380 defproc s

15390   save_o "ayc_rendered_bas"

15400 enddef

15410 defproc fatal_error(message$)

15420   ink #tw,red
15430   print #tw,"Fatal error:"!message$
15440   stop

15450 enddef

15460 defproc _debug(text$)

15470   print #tw,"DEBUG POINT:"&text$

15480 enddef

