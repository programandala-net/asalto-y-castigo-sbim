rem Asalto y castigo
rem para QL, en SuperBASIC.
rem Versión 00-2011040604

rem Copyright (C) 2011 Marcos Cruz (programandala.net)
rem Licencia:
rem http://programandala.net/licencia
rem Página del programa:
rem http://programandala.net/es.programa.asalto_y_castigo

rem Autor de las versiones originales
rem para ZX Spectrum, Amstrad CPC y Blassic:
rem Baltasar el Arquero
rem http://caad.es/baltasarq/

rem Nota:
rem Este fichero usa codificación estándar ISO 8859-1,
rem **no el juego de caracteres propio de QL**.

rem --------------------------------------------
rem Main

ayc

defproc ayc

  loc command$,understood

  first_time_init
  rep game
    credits
    game_init
    end_of_scene
    intro
    action_look
    rep command
      plot
      let command$=accept$
      let understood=parser(command$)
      rem print #tw,action,object,complement:rem debug!!!
      if understood:do_action action
    endrep command
  endrep game

enddef ayc

rem --------------------------------------------
rem Plot

deffn location_plot$

  if location=11 or location=38 or location=44:let thing_data(15,1)=location

  if location=16:ret "En la distancia, por entre los resquicios de las rocas, y allende el canal de agua, los sajones tratan de buscar la salida que encontraste por casualidad."
  if location<10 and location_exit(8,1):ret "Tus hombres siguen tus pasos."
  if thing_data(2,1)<>255 and thing_data(16,2)=0 and (location=46 or ambrosio_follows=1)
    let thing_data(2,1)=location
    ret "Tu benefactor te sigue, esperanzado."
  endif
  if location=28:let location_exit(28,3)=0:ret ""
  if location=31
    if location_exit(31,1)
      ret "Las rocas yacen desmoronadas a lo largo del pasaje."
    else
      ret "Las rocas bloquean el camino."
    endif
  endif
  ret ""

enddef

defproc plot

  if location=8 and location_exit(8,1)
    let location_exit(8,1)=0
    let saxons_follow=1
    narrate "Una partida sajona aparece por el este. Para cuando te vuelves al norte, ya no te queda ninguna duda: era una trampa."
    short_pause
    narrate "En el estrecho paso es posible resistir, aunque por desgracia sus efectivos son muy superiores a los tuyos.":rem "efectivos"?!!!
    end_of_scene 
    cls_
    narrate "Tus oficiales te conminan a huir."
    speak "Capturando a un general britano, ganan doblemente."
    narrate "Sabes que es cierto, y te duele."
    short_pause

  else

    if saxons_follow and location<12
      let saxons_follow=saxons_follow+1
      narrate "No sabes cuánto tiempo te queda..."
      if saxons_follow>10 
        narrate "Los sajones te capturan. Su general, sonriendo ampliamente, dice:"
        speak "Bien, bien... Del gran Ulfius podremos sacar una buena ventaja."
        end_of_scene
        action_end
        ret
      endif
    endif

    if location<10 and not location_exit(8,1)
      narrate "Tus hombres luchan con denuedo contra los sajones."
    endif
    if location>19 and not is_here(4)
      narrate "Ante la reinante e intimidante oscuridad, retrocedes a donde puedes ver."
      end_of_scene
      let location=17:action_look
      ret
    endif
    if location=51
      narrate "Agotado, das parte en el castillo de tu llegada y de lo que ha pasado."
      short_pause
      narrate "Pides audiencia al rey, Uther Pendragon."
      end_of_scene
      cls_
      speak "El rey, te indica el valido, ha ordenado que no se le moleste, pues sufre una amarga tristeza."
      short_pause
      narrate "No puedes entenderlo. El rey, tu amigo."
      short_pause
      narrate "Agotado, decepcionado, apesadumbrado, decides ir a dormir a tu casa. Es lo poco que puedes hacer."
      end_of_scene
      narrate "Te has ganado un buen descanso."
      action_end
    endif
  endif

enddef

rem --------------------------------------------
rem Actions

defproc do_action(action)

  sel on action
    =01:action_move 6
    =02:action_open
    =03:action_move 5
    =04:action_break
    =05:action_help
    =06:action_swim
    =07:action_take
    =08:action_drop
    =09:action_move 3
    =10:action_examine
    =11:action_speak
    =12:action_insert
    =13:action_look
    =14:action_move 1
    =15:action_move 4
    =16:action_move 2
    =17:action_end
    =18:action_fling
    =remainder:narrate "No puedes hacer eso."
  endsel

enddef 

defproc action_help
  narrate help$
  end_of_scene
enddef

defproc action_examine
  if object
    if is_here(object)
      narrate thing_description$(object)
    else
      narrate not_seen$
    endif
  else
    action_inventory
  endif
enddef

defproc action_end
  if yes("¿Quieres volver a intentarlo?")
    run
  else
    cls_:stop
  endif
enddef

defproc action_swim
  if location=11
    narrate "Caes hacia el fondo por el peso de tu coraza. Como puedes, te desprendes de ella y buceas, pensando en avanzar, aunque perdido."
    end_of_scene
    narrate "Consigues emerger, si bien en un sitio desconocido de la caverna..."
    end_of_scene
    let location=12
    action_look
  else
    narrate "No tiene sentido nadar ahora."
  endif
enddef

defproc action_open

  if location=47
    if is_here(16)
      narrate "El candado bloquea la puerta."
    else
      narrate "La puerta se abre, rechinando, mientras hiedras y hierbas se rompen en su trazado."
      short_pause
      narrate "Ambrosio, alegre, se despide de ti."
      speak "Estoy seguro de que volveremos a vernos"&r_quote$&", dice."
      narrate "Se ha ido."
      let thing_data(2,1)=255
      let thing_data(16,1)=255
      let thing_description$(19)="Entreabierta."
      let location_exit(47,4)=48
    endif
  else
    narrate "No hay nada que abrir ahora."
  endif

enddef

defproc action_drop

  sel on object
    =10:if location<12:narrate "No, es lo que queda de tu padre.":ret
    =4:narrate "No, sin luz es imposible moverse por la caverna.":ret
  endsel
  if thing_data(object,1)=0
    let thing_data(object,1)=location
    narrate "Hecho."
  else
    narrate i_dont_have_it$
  endif
enddef

defproc action_take
  if thing_data(object,1)=0:narrate "Pero si ya lo tengo...":ret
  if object=16 and thing_data(object,2)=1:narrate "Ambrosio la retiene consigo.":ret
  if thing_data(object,2)<>0:narrate "No es algo que se pueda coger.":ret
  let thing_data(object,1)=0:narrate "Hecho."
enddef

defproc action_break

  loc default_tool:rem flag set if no tool was specified
  loc tool:rem actual tool, default or not

  let default_tool=false
  if not complement
    let complement=10
    let default_tool=true
  endif
  let tool=complement

  rem temp added conditions!!!
  if not is_here(object:narrate not_seen$:ret
  if not is_here(tool):narrate i_dont_have_it:ret

  sel on object

    =22:rem tronco!!!

      if hacked_the_log
        narrate "La punta ya es lo suficientemente afilada."
      else
        sel on tool
          =10
            narrate "Sabes que el resultado es la hoja de tu espada, mellada. No."
          =17 
            let hacked_the_log=true
            narrate "Con el pedernal, recortas la punta del tronco."
          =remainder
            narrate "El problema es encontrar la herramienta adecuada para hacerlo."
        endsel
      endif

    =6:rem capa

      if tool=10
        let thing_data(6,1)=255
        let thing_data(11,1)=0
        let thing_data(12,1)=0
        let thing_data(23,1)=0
        narrate "Rasgas la capa, como buenamente puedes."
      else
        narrate not_with_that$
      endif

    =20:rem rocas

      if tool=22 
        if hacked_the_log
          let thing_data(20,1)=255
          let location_exit(31,1)=32
          narrate "Haciendo palanca, consigues desencajar una, y el resto caen por su propio peso."
        else
          narrate "Lo intentas con el tronco, pero la punta es demasiado gruesa, y no penetra entre los resquicios de las rocas."
        endif
        ret
      endif

      if tool=10
        narrate "Tu espada no hace nada, ni, por descontado, tus manos desnudas."
        ret
      endif

      if not is_here(tool)
        rem this condition seems out of the logic. check!!!
        narrate "En cualquier caso, no con las manos desnudas."
        ret
      endif

      if complement=22
        let thing_data(20,1)=255
        let location_exit(31,1)=32
        narrate "Haciendo palanca, consigues desencajar una, y el resto caen por su propio peso."
        ret
      endif

    =17:rem pedernal

      if complement=10
        if is_here(3)
          rem check!!! 3 vs 4
          let thing_data(3,1)=255
          let thing_data(4,1)=location
          let thing$(3)="amorfa"
          let thing$(4)="antorcha"
          narrate "Poderosas chispas salen del choque entre espada y pedernal, encendiendo la antorcha."
        else
          narrate "Ante el potente choque con la espada, poderosas chispas saltan en todas direcciones."
        endif
      else
        narrate not_with_that$
      endif

    =21:rem serpiente

      if complement=10
        narrate "Ante los amenazadores tajos, la serpiente huye."
        let location_exit(43,2)=44
        let thing_data(21,1)=255
        ret
      else
        narrate not_with_that$
        ret
      endif

    =remainder

      narrate "Eso no es lo adecuado ahora."
      ret

  endsel 

enddef

defproc action_speak

  sel on object
    =2:talk_to_ambrosio
    =13:talk_to_the_man
    =remainder:narrate "No tiene sentido hablar con eso."
  endsel

enddef

defproc talk_to_ambrosio

  if thing_data(2,1)=19

    let thing_data(3,1)=0
    let thing_data(17,1)=0
    let thing_data(2,1)=46
    speak "Hola, buen hombre."
    speak "Hola, Ulfius. Mi nombre es Ambrosio."
    end_of_scene
    narrate "Por primera vez, Ulfius se sienta y cuenta a Ambrosio todo lo que ha pasado. y tras tanto acontecido, llora desconsoladamente."
    short_pause
    cls_
    narrate "Ambrosio le propone un trato, que acepta: por ayudarle a salir de la cueva, objetos, vitales para la empresa, le son entregados."
    short_pause
    speak "Bien, Ambrosio, emprendamos la marcha."
    narrate "Ulfius se da la vuelta para ver si Ambrosio le sigue, pero... ha desaparecido."
    short_pause
    narrate "Ulfius piensa entonces en el hecho curioso de que supiera su nombre."
    end_of_scene

  else

    if location=46
      if not ambrosio_follows
        speak "La llave, Ambrosio, estaba ya en tu poder. Y es obvio que conocéis un camino más corto."
        speak "Estoy atrapado en la cueva debido a magia de maligno poder. En cuanto al camino, vos debéis hacer el vuestro, verlo todo con vuestros ojos."
        narrate "Ulfius sacude la cabeza."
        speak "No lo entiendo, la verdad."
      endif
    endif
    if location>=45 and location<=47
      speak "Por favor, Ulfius, cumple tu promesa. Toma la llave en tu mano y abre la puerta de la cueva."
      let thing_data(16,1)=0
      let thing_data(16,2)=0
      let ambrosio_follows=true
    endif

  endif

enddef

defproc talk_to_the_man

  if not talked_to_the_man
    speak "Me llamo Ulfius y..."
    let talked_to_the_man=true
    narrate "El hombre asiente, impaciente."
    speak "Somos refugiados de la gran guerra. Buscamos la paz."
    short_pause
  endif
  if is_here(18)
    let thing_data(18,1)=18
    narrate "El hombre se irrita."
    speak "No podemos permitiros huir con la piedra del druida."
    narrate "Hace un gesto..."
    short_pause
    speak "La piedra debe devolverse a su lugar de encierro."
    narrate "Un hombre te arrebata la piedra y se la lleva."
  else
    if is_here(10)
      narrate "El hombre se enfurece, y alza su mano indicando al norte."
      speak "Nadie portando armas puede pasar."
    else
      let location_exit(28,3)=29
      narrate "El hombre, calmado, indica hacia el este y habla:"
      speak "Si vienes en paz, puedes ir en paz."
      narrate "Todos se apartan y permiten ahora el paso al este."
    endif
  endif

enddef

defproc action_fling

  sel on location
    =19 
      if (object=10 or object=18) and talked_to_the_man
        let thing_data(object,1)=39
        narrate "La corriente lo arrastra fuertemente, hasta perderlo de vista."
      else
        narrate "No quieres perder eso."
      endif
    =13,16
      narrate "No hay suficiente profundidad."
    =remainder:
      narrate "No tiene sentido tirar nada ahora."
  endsel

enddef

defproc action_insert

  sel on complement
    =14
      sel on object
        =9,18
          let thing_data(object,1)=255
          narrate "Encaja. Metido. Desaparece en su interior."
          if thing_data(18,1)=255 and thing_data(9,1)=255
            let location_exit(41,2)=42
            narrate "La gran roca se desplaza y deja el paso libre."
          endif
        =remainder
          narrate "No encaja."
      endsel
    =remainder
      narrate "No tiene sentido meter nada en eso."
  endsel

enddef

defproc action_move(direction)

  rem formerly if x>0, check!!!
  if location_exit(location,direction)
    let location=location_exit(location,direction)
    action_look
  else
    narrate "No es posible."
  endif

enddef

defproc action_inventory

  loc i,list$
  let list$=""
  for i=1 to things
    if thing_data(i,1)=0:let list$=list$&"  - "&thing$(i)&nl$
  endfor i
  if len(list$)
    narrate "Inventario:"&nl$&list$
  else
    narrate "No llevo nada conmigo."
  endif

enddef

def proc action_look

  loc message$
  cls_
  describe h$(location) 
  let message$=location_plot$
  if len(message$):narrate message$
  list_present_things 

enddef

rem --------------------------------------------
rem Actions library

defproc list_present_things

  loc n,list$

  let list$="":rem objsLoc
  for n=1 to things
    if thing_data(n,1)=location and thing_data(n,2)=2
      let list$=list$&"  - "&iso_upper_1$(thing$(n))&nl$
      next n:exit n
    endif
    if thing_data(n,1)=location
      let list$=list$&"  - "&thing$(n)&nl$
    endif
  endfor n
  if len(list$)
    ink #tw,light_grey
    print #tw,"Puedes ver:"&nl$&list$
  endif

enddef

rem --------------------------------------------
rem Parser

deffn parser(command$)

  loc first_letter,last_letter,command_len

  let first_letter=1
  let last_letter=1
  let command$=command$&" "
  let command_len=len(command$)

  let action=false
  let object=false
  let complement=false

  rep find_word

    if first_letter>=command_len:exit find_word
    rep find_first_letter
      if command$(first_letter)<>" "
        exit find_first_letter
      endif
      let first_letter=first_letter+1
    endrep find_first_letter
    let last_letter=first_letter
    rep find_last_letter
      if command$(last_letter+1)=" "
        exit find_last_letter
      endif
      let last_letter=last_letter+1
    endrep find_last_letter

    parse_word command$(first_letter to last_letter)
    let first_letter=last_letter+2

  endrep find_word

  ret syntax_is_fine

enddef 

defproc parse_word(word$)

  if not action
    let action=parse_action(word$)
  else
    if not object
      let object=parse_noun(word$)
    else
      if not complement:complement=parse_noun(word$)
    endif
  endif

enddef

deffn parse_action(word$)
  loc i
  for i=1 to verbs
    if word$=verb$(i)
      rem print #tw,word$,verb$(i)&"!":rem debug!!!
      ret action_id(i)
    endif
  endfor i
  ret 0
enddef

deffn parse_noun(word$)
  loc i
  for i=1 to nouns
    if word$=noun$(i)
      rem print #tw,word$,noun$(i)&"!":pause:rem debug!!!
      ret thing_id(i)
    endif
  endfor i
  ret 0
enddef

deffn syntax_is_fine

  if not action:narrate "No conozco ese verbo.":ret 0

  if action_syntax(action)=1 and not object:_debug "object missing":narrate not_seen$:ret 0
  if action_syntax(action)=2 and (not object or not complement):_debug "object or complement missing":narrate not_seen$:ret 0
  if action_syntax(action):if not is_here(object):_debug "object not here":narrate not_seen$:ret 0
  if action_syntax(action)=2 and complement:if not is_here(complement):_debug "complement not here":narrate not_seen$:ret 0

  ret 1

enddef

rem --------------------------------------------
rem Data interface

deffn is_here(thing)
  if thing=-1:ret 0:rem to prevent an error. not sur if thing could be -1, but it was!
  ret thing_data(thing,1)=0 or thing_data(thing,1)=location
enddef


rem --------------------------------------------
rem Input

deffn iso_input$(prompt$)

  loc output$,key$,key,max_chars
  loc cursor_col
  rem loc cursor_x0,cursor_y0:rem cursor origin coords
  loc cursor_x,cursor_y:rem cursor coords

  let output$=""
  rem let cursor_col=1
  print #tw,prompt$;
  let max_chars=char_x(#tw)-len(prompt$)-2
  rem let cursor_x0=pos_x(#tw)
  rem let cursor_x=cursor_x0
  let cursor_x=pos_x(#tw)
  rem let cursor_y0=pos_y(#tw)
  rem let cursor_y=cursor_y0
  let cursor_y=pos_y(#tw)
  cursen #tw
  rep wait_for_key
    let key$=inkey$(#tw)
    let key=code(key$)
    sel on key
      =10:rem enter
        exit wait_for_key
      =32
        if len(output$)
          if output$(len(output$))<>" ":type key$
        endif
      =65 to 90:type chr$(key+32)
      =97 to 122:type key$
      =131,163:type chr$(233) : rem e/E with acute
      =135,167:type chr$(252) : rem u/U with diaeresis
      =137,169:type chr$(241) : rem n/N with tilde
      =140:type chr$(225) : rem a with acute
      =147:type chr$(237) : rem i with acute
      =150:type chr$(243) : rem o with acute
      =153:type chr$(250) : rem u with acute
      =192:rem cursor left
        rem unfinished!!! experimental!!!
        if 0 and cursor_x>cursor_x0
          beep 1000,0
          curdis #tw
          let cursor_x=cursor_x-char_w(#tw)
          rem let cursor_col=cursor_col-1
          cursor #tw,cursor_x,cursor_y
          print #tw;
          cursen #tw
        endif
      =194
        if len(output$):untype:rem back space
      =200:rem cursor rigth
      =202
        if len(output$):untype:rem delete
    endsel 
  endrep wait_for_key
  curdis #tw
  print #tw\
  ret output$
enddef

defproc type(char$)
  if len(output$)<max_chars
    let output$=output$&char$
    print #tw,char$;
    let cursor_x=cursor_x+char_w(#tw)
    cursor #tw,cursor_x,cursor_y
  endif
enddef

defproc untype
  loc lenght
  let lenght=len(output$)
  if lenght
    let output$=output$(1 to lenght-1)
    let cursor_x=cursor_x-char_w(#tw)
    cursor #tw,cursor_x,cursor_y
    print #tw," ";
    cursor #tw,cursor_x,cursor_y
  endif
enddef

deffn yes(question$)
  loc answer$
  print #tw,question$!"(S/N)"!;
  rep answer
    let answer$=inkey$(#tw)
    if answer$ instr "sn":exit answer
  end rep answer
  ret answer$ instr "s"
enddef

defproc end_of_scene:rem rename?!!!
  ink #tw,dark_green
  print #tw,"..."\\
  wait_for_key_press(16)
enddef

defproc short_pause
  wait_for_key_press(4)
enddef

defproc wait_for_key_press(seconds)

  loc start_time
  let start_time=date

  rep dont_press_a_key
    if inkey$(#tw)="" or date>start_time+seconds
      exit dont_press_a_key
    endif
  end rep dont_press_a_key
  rep press_a_key
    if inkey$(#tw)<>"" or date>start_time+seconds
      exit press_a_key
    endif
  endrep press_a_key

enddef

deffn accept$
  loc command$
  ink #tw,yellow
  rep valid_command
    rem input #tw,\"> ";command$
    let command$=iso_input$("> ")
    if command$<>"":exit valid_command
  endrep valid_command
  ink #tw,light_grey
  ret command$
enddef

rem --------------------------------------------
rem Strings

deffn iso_upper(char)
  loc c:rem needed by QDOS and Minerva: SELect cannot use the parameter
  let c=chag
  sel on c
    =97 to 122:ret c-32
    =remainder:ret c
  endsel
enddef

deffn iso_upper$(text$)
  loc i,upper_text$
  let upper_text$=text$
  for i=1 to len(upper_text$)
    let upper_text$(i)=chr$(iso_upper(code(text$(i))))
  endfor i
  ret upper_text$
enddef

deffn iso_upper_1$(text$)
  ret iso_upper$(text$(1))&text$(2 to)
enddef

rem --------------------------------------------
rem Screen

defproc cls_
  ink #tw,light_grey
  cls #tw
enddef

defproc full_screen(channel)
  rem tmp!!!
  rem From the Display toolkit, by Dylwin Jones.
  loc sw,sh,sx,sy
  let sw=flim_w(#channel)
  let sh=flim_h(#channel)
  let sx=flim_x(#channel)
  let sy=flim_y(#channel)
  window #channel,sw,sh,sx,sy
enddef

rem --------------------------------------------
rem Fonts

defproc fonts(font_address)
  char_use#tw,font_address,0 
enddef

defproc iso_font
  fonts font_address
enddef

defproc ql_font
  fonts 0
enddef

defproc init_font
  loc font_size
  let font$=dev$&"iso_8859-1_font"
  font_size=flen(\font$)
  font_address=alchp(font_size)
  lbytes font$,font_address
  iso_font
enddef

rem --------------------------------------------
rem Text output

defproc speak(quote$)

  loc last
  ink #tw,yellow
  if r_quote$ instr quote$
    rem A closing "»" in the text means the actual quote is closed before the end of quote$.
    rem This manages quotes like "«Yes», he said.".
    tell l_quote$&quote$
  else
    let last=len(quote$)
    if quote$(last)="." and quote$(last-1)<>"."
      tell l_quote$&quote$(1 to last-1)&r_quote$&"."
    else
      tell l_quote$&quote$(1 to last)&r_quote$
    endif
  endif

enddef

defproc describe(txt$)
  ink #tw,dark_cyan:tell txt$
enddef

defproc narrate(txt$)
  ink #tw,light_grey:tell txt$
enddef

defproc tell(txt$)

  local text$,first,last

  if len(txt$)
    let text$=txt$&" "
    let first=1
    for last=1 to len(text$)
      if text$(last)=" "
        print #tw,!text$(first to last-1);
        let first=last+1
      endif
    endfor last
  endif
  print #tw,\\

enddef

rem --------------------------------------------
rem About

defproc credits
  cls_
  ink #tw,light_red:print #tw,"Asalto y castigo"
  ink #tw,dark_cyan
  print #tw,\"Por Baltasar el Arquero"
  print #tw,"http://caad.es/baltasarq/"
  print #tw,\"Reescrita en SuperBASIC para QL por"
  print #tw,"Marcos Cruz (programandala.net), 2011"
  ink #tw,light_grey
  print #tw,\"C.A.A.D."\"http://www.caad.es/"\\\
enddef

defproc intro
  cls_
  narrate "El sol despunta de entre la niebla, haciendo humear los tejados de paja."
  short_pause
  narrate "Piensas en el encargo realizado por Uther Pendragon. Atacar una aldea tranquila, aunque sea una llena de sajones, no te llena de orgullo."
  short_pause
  narrate "Los hombres se ciernen sobre la aldea, y la destruyen. No hubo tropas enemigas, ni honor en la batalla."
  end_of_scene
  cls_
  speak "Sire Ulfius, la batalla ha terminado."
  narrate "Lentamente, das la orden de volver a casa. Los oficiales detienen como pueden el saqueo."
  end_of_scene
enddef

rem --------------------------------------------
rem Init

defproc init_ql
  rem unfinished!!!
  tk2_ext
  if ver$="HBA"
    let dev$="dos1_sb_ayc_"
  else
    let dev$="flp1_"
  endif
  rem lrespr dev$&"ext_exists.bin"
  if not here("gd2")
    rem lrespr dev$&"ext_display.cde"
  endif
  if not here("maximum")
    lrespr dev$&"ext_minmax_code"
  endif
enddef

defproc init_screen

  rem unfinished!!!

  mode 8

  rem QL colours in mode 8:
  let black=0
  let blue=1
  let red=2
  let purple=3
  let green=4
  let cyan=5
  let yellow=6
  let white=7
  rem Original Blassic/CPC colours:
  let dark_blue=1
  let dark_green=4
  let dark_cyan=5
  let brown=2
  let light_grey=7
  let dark_grey=7
  let light_blue=5
  let light_green=4
  let light_cyan=5
  let light_red=2
  let light_purple=3

  if here("scr_xlim")
    let scr_w=scr_xlim
    let scr_h=scr_ylim
  else
    let scr_w=512
    let scr_h=256
  endif

enddef

defproc init_windows

  let csize_w=3-(scr_w=512)
  let csize_h=scr_w>512

  rem Background window (bw)
  let bw_w=scr_w
  let bw_h=scr_h
  let bw_x=0
  let bw_y=0
  let bw=fopen("scr_")
  window #bw,bw_w,bw_h,bw_x,bw_y
  paper #bw,black
  cls #bw

  let bw_border=8
  let border_gap=8:rem pixels between the background border and the main window

  rem Main window (mw)
  let mw=fopen("scr_")
  let mw_w=minimum(800,scr_w)
  let mw_h=minimum(600,scr_h)
  let mw_x=(scr_w-mw_w)/2
  let mw_y=(scr_h-mw_h)/2
  let mw_border=8
  if 0
  window #mw,mw_w,mw_h,mw_x,mw_y
  paper #mw,black
  ink #mw,black
  cls #mw
  border #mw,mw_border,green,white
  endif

  rem Text window (tw)
  let tw=fopen("con_")
  csize #tw,csize_w,csize_h
  let tw_w=mw_w-2*mw_border-2*border_gap
  let tw_h=mw_h-2*mw_border-2*border_gap
  let tw_x=mw_x+(mw_w-tw_w)/2
  let tw_y=mw_y+(mw_h-tw_h)/2
  window #tw,tw_w,tw_h,tw_x,tw_y
  paper #tw,black
  ink #tw,light_grey
  cls #tw

  init_font

enddef

defproc first_time_init
  init_ql
  init_screen
  init_windows
enddef

defproc game_init

  init_vars
  init_data

enddef

defproc init_vars

  rem Constants
  let nl$=chr$(10):rem new line
  let l_quote$="«":rem castilian left quote
  let r_quote$="»":rem castilian right quote

  let location=1:rem change it for debugging!!! must be 1

  rem Flags:
  let ambrosio_follows=false
  let saxons_follow=false
  let talked_to_the_man=false
  let hacked_the_log=false

  rem Messages
  let not_seen$="No lo veo, o no es importante."
  let i_dont_have_it$="No llevo eso conmigo."
  let not_with_that$="Con eso no..."
  let help$="Direcciones: n(orte), s(ur), e(ste), o(este), arriba, abajo."&nl$&"(m)irar redescribe un lugar."&nl$&"(ex)aminar permite examinar un objeto, o en su defecto a ti."&nl$&"Se puede cortar, nadar, atacar, empujar, golpear, coger, dejar, y tirar algo."

enddef

defproc init_data

  loc i,j,id$,max_word_lenght,action,last_action

  let max_word_lenght=10

  restore

  rem locs
  let locations=51
  dim h$(locations,255)
  for i=1 to locations
    read h$(i)
  endfor i

  rem directions
  let directions=6
  if false
    rem unfinished, experimental!!!
    for j=1 to directions
      read id$:keyin "let "&id$&"="&j
    endfor j
  endif
  dim location_exit(locations,directions)
  for i=1 to locations
    for j=1 to directions
      read location_exit(i,j)
    endfor j
  endfor i

  let nouns=31
  dim noun$(nouns,max_word_lenght)
  dim thing_id(nouns)
  let things=23
  dim thing$(things,max_word_lenght)
  for i=1 to nouns
    read thing_id(i),noun$(i)
    let thing$(thing_id(i))=noun$(i):rem el último sinónimo es el nombre principal
  endfor i

  dim thing_description$(things,128)
  for i=1 to things
    read thing_description$(i)
  endfor i

  dim thing_data(things,2)
  for i=1 to things
    for j=1 to 2
      read thing_data(i,j)
    endfor j
  endfor i

  let verbs=117
  let actions=18
  dim verb$(verbs,max_word_lenght)
  dim action_id(verbs)
  dim action_syntax(actions)
  let action=1
  let last_action=0
  for i=1 to verbs
    read action,verb$(i)
    let action_id(i)=action
    if action<>last_action
      rem New action found
      read action_syntax(action)
      let last_action=action
    endif
  endfor i

enddef

rem --------------------------------------------
rem Data

rem Location descriptions

data "Aldea Sajona. No ha quedado nada en pie, ni piedra sobre piedra. El entorno es desolador. Solo resta volver al sur, a casa."
data "Sobre la colina, casi sobre la niebla de la aldea sajona arrasada al norte, a tus pies. El camino desciende hacia el oeste."
data "Camino entre colinas. El camino avanza por el valle, desde la parte alta, al este, a una zona harto boscosa, al oeste."
data "Cruce de caminos. Una senda parte al oeste, a la sierra por el paso del Perro, y otra hacia el norte, por un frondoso bosque que la rodea."
data "Desde la linde, al sur, hacia el oeste se extiende frondoso el bosque que rodea la sierra. La salida se abre hacia el sur."
data "Bosque. Jirones de niebla se enzarcen en frondosas ramas y arbustos. La senda serpentea entre raíces, de un luminoso este al oeste."
data "Paso del Perro. Abruptamente, del bosque se pasa a un estrecho camino entre altas rocas. El inquietante desfiladero tuerce de este a sur."
data "Entrada a la cueva. El paso entre el desfiladero sigue de norte a este. La entrada a una cueva se abre al sur en la pared de roca."
data "Derrumbe. El camino desciende hacia la agreste sierra, al oeste, desde los verdes valles al este. Pero un gran derrumbe bloquea la sierra."
data "Gruta de entrada. El estrecho paso se adentra hacia el oeste, desde la boca, al norte. "
data "Gran lago. Una gran estancia alberga un lago de profundas e iridiscentes aguas, debido a la luz exterior. No hay otra salida que el este."
data "Salida del paso secreto. Una gran estancia se abre hacia el oeste, y se estrecha hasta morir, al este, en una parte de agua."
data "Puente semipodrido. La sala se abre en semioscuridad a un puente cubierto de podredumbre sobre el lecho de un canal, de este a oeste."
data "Recodo de la cueva. La iridiscente cueva gira de este a sur."
data "Pasaje arenoso. La gruta desciende de norte a sur sobre un lecho arenoso. Al este, un agujero del que llega claridad."
data "Pasaje del agua. Como un acueducto, el agua baja con gran fuerza de norte a este, aunque la salida practicable es la del oeste."
data "Estalactitas. Muchas estalactitas se agrupan encima de tu cabeza, y se abren cual arco de entrada hacia el este y sur."
data "Puente de piedra. Un arco de piedra se eleva, cual puente sobre la oscuridad, de este a oeste. En su mitad, un altar."
data "Recodo arenoso del canal. La furiosa corriente, de norte a este, impide el paso, excepto al oeste. Al fondo, se oye un gran estruendo."
data "Un tramo de cueva estrecho te permite avanzar hacia el norte y el sur; un pasaje surge al este."
data "Un tramo de cueva estrecho te permite avanzar de este a oeste; un pasaje surge al sur."
data "Un tramo de cueva estrecho te permite avanzar de este a oeste; un pasaje surge al sur."
data "Un tramo de cueva estrecho te permite avanzar de oeste a sur."
data "Un tramo de cueva estrecho te permite avanzar de este a norte."
data "Un tramo de cueva estrecho te permite avanzar de este a oeste. Al norte y al sur surgen pasajes."
data "Un tramo de cueva estrecho te permite avanzar de este a oeste. Al norte surge un pasaje."
data "Un tramo de cueva estrecho te permite avanzar al oeste. Al norte surge un pasaje."
data "Refugio. Una amplia estancia de norte a este, hace de albergue a refugiados: hay banderas de ambos bandos. Un hombre anciano te contempla. Los refugiados te rodean."
data "Espiral. Cual escalera de caracol gigante, desciende a las profundidades, dejando a los refugiados al oeste."
data "Inicio de la espiral. Se eleva en la penumbra. La caverna se estrecha ahora como para una sola persona, hacia el este."
data "Puerta norte. En este pasaje grandes rocas se encuentran entre las columnas de un arco de medio punto."
data "Precipicio. El camino ahora no excede de dos palmos de cornisa sobre un abismo insondable. El soporte de roca gira en 'U' de oeste a sur."
data "Pasaje de salida. El paso se va haciendo menos estrecho a medida que se avanza hacia el sur, para entonces comenzar hacia el este."
data "Pasaje de gravilla. El paso se anchea de oeste a norte, y guijarros mojados y mohosos tachonan el suelo de roca."
data "Puente sobre el acueducto. Un puente se tiende de norte a sur sobre el curso del agua. Resbaladizas escaleras descienden hacia el oeste."
data "Remanso. Estruendosa corriente baja con el pasaje elevado desde el oeste, y forma un meandro arenoso. Unas escaleras suben al este."
data "Canal de agua. El agua baja del oeste con renovadas fuerzas, dejando un estrecho paso elevado lateral para avanzar a este o a oeste."
data "Gran Cascada. Cae el agua hacia el este, descendiendo con gran fuerza hacia el canal, no sin antes embalsarse en un lago poco profundo."
data "Interior de la cascada. Musgoso y rocoso, con la cortina de agua tras de ti, el nivel del agua ha crecido un poco en este curioso hueco."
data "Explanada. Una gran explanda enlosetada contempla un bello panorama de estalactitas. Unos casi imperceptibles escalones conducen al este."
data "Ídolo. El ídolo parece un centinela siniestro de una gran roca que se encuentra al sur. Se puede volver a la explanada al oeste."
data "Pasaje estrecho. Como un pasillo que corteja el canal de agua, a su lado, baja de norte a sur. Se aprecia un aumento de luz hacia el sur."
data "Pasaje de la serpiente. El pasaje sigue de norte a sur."
data "Lago interior. Unas escaleras dan paso a un hermoso lago interior, y siguen hacia el oeste. Al norte, un oscuro y estrecho pasaje sube."
data "Cruce de pasajes. Estrechos pasos permiten ir al oeste, al este (menos oscuro), y al sur, un lugar de gran luminosidad."
data "Hogar de Ambrosio. Un catre, algunas velas y una mesa es todo lo que tiene Ambrosio."
data "Salida de la cueva. Por el oeste, una puerta impide, cuando cerrada, la salida de la cueva. Se adivina la luz diurna al otro lado."
data "Bosque a la entrada. Apenas se puede reconocer la entrada de la cueva, al este. El sendero sale del bosque hacia el oeste."
data "Sendero del bosque. El sendero recorre esta parte del bosque de este a oeste."
data "Camino norte. El camino norte de Westmorland se interna hacia el bosque, al norte (en tu estado no puedes ir), y a Westmorland, al sur."
data "Westmorland. La villa bulle de actividad con el mercado en el centro de la plaza, donde se encuentra el castillo."

rem Location exits

rem data "north_dir","south_dir","east_dir","west_dir","up_dir","down_dir":rem ids unfinished, experimental!!!
data 0,2,0,0,0,0
data 1,0,0,3,0,0
data 0,0,2,4,0,0
data 5,0,3,9,0,0
data 0,4,0,6,0,0
data 0,0,5,7,0,0
data 0,8,6,0,0,0
data 7,10,0,0,0,0
data 0,0,4,0,0,0
data 8,0,0,11,0,0
data 0,0,10,0,0,0
data 0,0,0,13,0,0
data 0,0,12,14,0,0
data 0,15,13,0,0,0
data 14,17,16,0,0,0
data 0,0,0,15,0,0
data 15,20,18,0,0,0
data 0,0,19,17,0,0
data 0,0,0,18,0,0
data 17,22,25,0,0,0
data 0,27,23,20,0,0
data 0,24,27,22,0,0
data 0,25,0,21,0,0
data 22,0,26,0,0,0
data 22,28,23,21,0,0
data 26,0,20,27,0,0
data 27,0,0,25,0,0
data 26,0,0,0,0,0
data 0,0,0,28,0,30
data 0,0,31,0,29,0
data 0,0,0,30,0,0
data 0,33,0,31,0,0
data 32,0,34,0,0,0
data 35,0,0,33,0,0
data 40,34,0,36,0,36
data 0,0,35,37,35,0
data 0,0,36,38,0,0
data 0,0,37,39,0,0
data 0,0,38,0,0,0
data 0,35,41,0,0,0
data 0,0,0,40,0,0
data 41,43,0,0,0,0
data 42,0,0,0,0,0
data 43,0,0,45,0,0
data 0,47,44,46,0,0
data 0,0,45,0,0,0
data 45,0,0,0,0,0
data 0,0,47,49,0,0
data 0,0,48,50,0,0
data 0,51,49,0,0,0
data 50,0,0,0,0,0

rem Things and nouns

rem thing_id,noun
data 01,"altar"
data 02,"ambrosio"
data 03,"antorcha"
data 04,"amorfa"
data 05,"banderas"
data 06,"capa"
data 07,"cascada"
data 08,"derrumbe"
data 09,"esmeralda"
data 09,"joya"
data 10,"espada"
data 11,"harapo"
data 12,"hilo"
data 13,"anciano"
data 13,"jefe"
data 13,"hombre"
data 14,"ojo"
data 14,"agujero"
data 14,"ídolo"
data 15,"lago"
data 15,"laguna"
data 15,"agua"
data 16,"llave"
data 17,"pedernal"
data 18,"piedra"
data 19,"puerta"
data 20,"rocas"
data 21,"serpiente"
data 22,"tronco"
data 23,"trozo"
data 23,"pedazo"

rem Thing descriptions

data "Justo en la mitad del puente, debe sostener algo importante."
data "Ambrosio es un hombre de mediana edad, que te mira afable."
data "Apagada."
data "Ilumina perfectamente."
data "Son las banderas britana y sajona, respectivamente. Dos dragones rampantes, rojo y blanco, enfrentados.":rem respectivamente?!!!
data "Tu capa de general, de fina lana tintada de negro."
data "No ves nada por la cortina de agua. El lago es muy poco profundo."
data "Muchas, inalcanzables rocas, apiladas una sobre otra."
data "Es preciosa."
data "Legado de tu padre, fiel herramienta en mil batallas."
data "Un trozo un poco grande de capa."
data "Un hilo se ha desprendido al cortar la capa con la espada."
data "Es el jefe de los refugiados."
data "El ídolo tiene dos agujeros por ojos."
data "La luz entra por un resquicio, y caprichosos reflejos te maravillan."
data "Una llave grande, de hierro herrumboso."
data "Se trata de una dura y afilada piedra."
data "Recia y pesada, pero no muy grande, de forma piramidal."
data "Muy recia y con un gran candado."
data "Son muchas, aunque parecen ligeras y con huecos entre ellas."
data "Una serpiente bloquea el paso al sur, corriendo a su lado el agua."
data "Es un tronco recio, pero de liviano peso."
data "Es un poco de lo que antes era tu capa."

rem Thing data

rem location,stc:rem what is stc? rename!!!
data 18,1
data 19,2
data 255,0
data 255,0
data 28,1
data 0,0
data 38,1
data 9,1
data 39,0
data 0,0
data 255,0
data 255,0
data 28,1
data 41,1
data 44,1
data 46,1
data 255,0
data 18,0
data 47,1
data 31,1
data 43,1
data 15,0
data 255,0

rem verbs and actions

rem action id,verb or synonym,action syntax (only for the first synonym)
data 01,"abajo",0
data 01,"baja"
data 01,"bajar"
data 01,"descender"
data 01,"desciende"
data 02,"abre",1
data 02,"abrir"
data 03,"arriba",0
data 03,"ascender"
data 03,"asciende"
data 03,"sube"
data 03,"subir"
data 04,"afila",1
data 04,"afilar"
data 04,"ataca"
data 04,"atacar"
data 04,"corta"
data 04,"cortar"
data 04,"empuja"
data 04,"empujar"
data 04,"golpea"
data 04,"golpear"
data 04,"mata"
data 04,"matar"
data 04,"recorta"
data 04,"recortar"
data 04,"rompe"
data 04,"romper"
data 05,"ayuda",0
data 05,"ayudar"
data 06,"bucea",0
data 06,"bucear"
data 06,"nada"
data 06,"nadar"
data 07,"agarra",1
data 07,"agarrar"
data 07,"coge"
data 07,"coger"
data 07,"toma"
data 07,"tomar"
data 08,"deja",1
data 08,"dejar"
data 08,"soltar"
data 08,"suelta"
data 09,"e",0
data 09,"este"
data 10,"ex",0
data 10,"examina"
data 10,"examinar"
data 10,"examinarte"
data 10,"examínate"
data 10,"i"
data 11,"charla",1
data 11,"charlar"
data 11,"conversa"
data 11,"conversar"
data 11,"habla"
data 11,"hablar"
data 11,"hablarle"
data 11,"platica"
data 11,"platícalo"
data 11,"platícale"
data 11,"platicar"
data 11,"platicarlo"
data 11,"platicarle"
data 11,"comentar"
data 11,"comentarle"
data 11,"comenta"
data 11,"coméntale"
data 11,"coméntalo"
data 11,"coméntaselo"
data 11,"di"
data 11,"decir"
data 11,"decirle"
data 11,"díselo"
data 11,"dile"
data 11,"dilo"
data 11,"pregunta"
data 11,"pregúntale"
data 11,"preguntar"
data 11,"preguntarle"
data 11,"preguntarlo"
data 11,"preguntárselo"
data 12,"introduce",2
data 12,"introducir"
data 12,"mete"
data 12,"meter"
data 12,"pon"
data 12,"poner"
data 12,"coloca"
data 12,"colocar"
data 12,"sitúa"
data 12,"situar"
data 13,"m",0
data 13,"mira"
data 13,"mirar"
data 13,"ojea"
data 13,"ojear"
data 14,"n",0
data 14,"norte"
data 15,"o",0
data 15,"oeste"
data 16,"s",0
data 16,"sur"
data 17,"acaba",0
data 17,"acabar"
data 17,"fin"
data 17,"finaliza"
data 17,"finalizar"
data 17,"termina"
data 17,"terminar"
data 18,"arroja",1
data 18,"arrojar"
data 18,"lanza"
data 18,"lanzar"
data 18,"tira"
data 18,"tirar"

rem --------------------------------------------
rem Debug

defproc fatal_error(message$)
  ink #tw,red
  print #tw,"Fatal error:"!message$
  stop
enddef

defproc _debug(text$)
  print #tw,"DEBUG POINT:"&text$
enddef

